{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAccept = useAccept;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nvar _react = require(\"react\");\n\nfunction useAccept(spec) {\n  const {\n    accept\n  } = spec;\n  return (0, _react).useMemo(() => {\n    (0, _invariant).invariant(spec.accept != null, 'accept must be defined');\n    return Array.isArray(accept) ? accept : [accept];\n  }, [accept]);\n}","map":{"version":3,"mappings":";;;;;QAUgBA;;AAVU,cAAsB,kCAAtB;;AAEF,UAAO,mBAAP;;SAQRA,UACfC,MACe;AACf,QAAM;AAAEC;AAAF,MAAaD,IAAnB;AACA,SAAM,IAACE,MAAD,EAAQA,OAAR,CAAQ,MAAO;QACpBC,YAASA,UAACH,IAAI,CAACC,MAALD,IAAe,MAAM;AAC/B,WAAOI,KAAK,CAACC,OAAND,CAAcH,MAAdG,IAAwBH,MAAxBG,GAAiC,CAACH,MAAD,CAAxC;AACA,GAHK,EAGH,CAACA,MAAD,CAHG,CAAN;AAIA","names":["useAccept","spec","accept","useMemo","invariant","Array","isArray"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/react-dnd/src/hooks/useDrop/useAccept.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Identifier } from 'dnd-core'\nimport { useMemo } from 'react'\nimport type { DropTargetHookSpec } from '../types.js'\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nexport function useAccept<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n): Identifier[] {\n\tconst { accept } = spec\n\treturn useMemo(() => {\n\t\tinvariant(spec.accept != null, 'accept must be defined')\n\t\treturn Array.isArray(accept) ? accept : [accept]\n\t}, [accept])\n}\n"]},"metadata":{},"sourceType":"script"}