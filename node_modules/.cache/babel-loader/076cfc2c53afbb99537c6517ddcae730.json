{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _wrapConnectorHooksJs = require(\"./wrapConnectorHooks.js\");\n\nvar _isRefJs = require(\"./isRef.js\");\n\nvar _shallowequal = require(\"@react-dnd/shallowequal\");\n\nclass SourceConnector {\n  receiveHandlerId(newHandlerId) {\n    if (this.handlerId === newHandlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get connectTarget() {\n    return this.dragSource;\n  }\n\n  get dragSourceOptions() {\n    return this.dragSourceOptionsInternal;\n  }\n\n  set dragSourceOptions(options) {\n    this.dragSourceOptionsInternal = options;\n  }\n\n  get dragPreviewOptions() {\n    return this.dragPreviewOptionsInternal;\n  }\n\n  set dragPreviewOptions(options) {\n    this.dragPreviewOptionsInternal = options;\n  }\n\n  reconnect() {\n    const didChange = this.reconnectDragSource();\n    this.reconnectDragPreview(didChange);\n  }\n\n  reconnectDragSource() {\n    const dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n    const didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragSource();\n    }\n\n    if (!this.handlerId) {\n      return didChange;\n    }\n\n    if (!dragSource) {\n      this.lastConnectedDragSource = dragSource;\n      return didChange;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragSource = dragSource;\n      this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n      this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n    }\n\n    return didChange;\n  }\n\n  reconnectDragPreview() {\n    let forceDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n    const didChange = forceDidChange || this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragPreview();\n    }\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dragPreview) {\n      this.lastConnectedDragPreview = dragPreview;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragPreview = dragPreview;\n      this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n      this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n    }\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didConnectedDragSourceChange() {\n    return this.lastConnectedDragSource !== this.dragSource;\n  }\n\n  didConnectedDragPreviewChange() {\n    return this.lastConnectedDragPreview !== this.dragPreview;\n  }\n\n  didDragSourceOptionsChange() {\n    return !(0, _shallowequal).shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n  }\n\n  didDragPreviewOptionsChange() {\n    return !(0, _shallowequal).shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n  }\n\n  disconnectDragSource() {\n    if (this.dragSourceUnsubscribe) {\n      this.dragSourceUnsubscribe();\n      this.dragSourceUnsubscribe = undefined;\n    }\n  }\n\n  disconnectDragPreview() {\n    if (this.dragPreviewUnsubscribe) {\n      this.dragPreviewUnsubscribe();\n      this.dragPreviewUnsubscribe = undefined;\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  }\n\n  get dragSource() {\n    return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n  }\n\n  get dragPreview() {\n    return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n  }\n\n  clearDragSource() {\n    this.dragSourceNode = null;\n    this.dragSourceRef = null;\n  }\n\n  clearDragPreview() {\n    this.dragPreviewNode = null;\n    this.dragPreviewRef = null;\n  }\n\n  constructor(backend) {\n    this.hooks = (0, _wrapConnectorHooksJs).wrapConnectorHooks({\n      dragSource: (node, options) => {\n        this.clearDragSource();\n        this.dragSourceOptions = options || null;\n\n        if ((0, _isRefJs).isRef(node)) {\n          this.dragSourceRef = node;\n        } else {\n          this.dragSourceNode = node;\n        }\n\n        this.reconnectDragSource();\n      },\n      dragPreview: (node, options) => {\n        this.clearDragPreview();\n        this.dragPreviewOptions = options || null;\n\n        if ((0, _isRefJs).isRef(node)) {\n          this.dragPreviewRef = node;\n        } else {\n          this.dragPreviewNode = node;\n        }\n\n        this.reconnectDragPreview();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dragSourceRef = null;\n    this.dragSourceOptionsInternal = null; // The drag preview may either be attached via ref or connect function\n\n    this.dragPreviewRef = null;\n    this.dragPreviewOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDragSource = null;\n    this.lastConnectedDragSourceOptions = null;\n    this.lastConnectedDragPreview = null;\n    this.lastConnectedDragPreviewOptions = null;\n    this.backend = backend;\n  }\n\n}\n\nexports.SourceConnector = SourceConnector;","map":{"version":3,"mappings":"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","names":["SourceConnector","receiveHandlerId","newHandlerId","handlerId","reconnect","connectTarget","dragSource","dragSourceOptions","dragSourceOptionsInternal","options","dragPreviewOptions","dragPreviewOptionsInternal","didChange","reconnectDragSource","reconnectDragPreview","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","lastConnectedDragSource","lastConnectedHandlerId","lastConnectedDragSourceOptions","dragSourceUnsubscribe","backend","connectDragSource","forceDidChange","dragPreview","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","lastConnectedDragPreview","lastConnectedDragPreviewOptions","dragPreviewUnsubscribe","connectDragPreview","shallowEqual","undefined","dragPreviewNode","dragPreviewRef","dragSourceNode","dragSourceRef","current","clearDragSource","clearDragPreview","hooks","wrapConnectorHooks","node","isRef"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/react-dnd/src/internals/SourceConnector.ts"],"sourcesContent":["import type { ReactElement, Ref, RefObject } from 'react'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\nimport type { Backend, Unsubscribe, Identifier } from 'dnd-core'\nimport { isRef } from './isRef.js'\nimport type { DragSourceOptions, DragPreviewOptions } from '../types/index.js'\nimport { shallowEqual } from '@react-dnd/shallowequal'\n\nexport interface Connector {\n\thooks: any\n\tconnectTarget: any\n\treceiveHandlerId(handlerId: Identifier | null): void\n\treconnect(): void\n}\n\nexport class SourceConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdragSource: (\n\t\t\tnode: Element | ReactElement | Ref<any>,\n\t\t\toptions?: DragSourceOptions,\n\t\t) => {\n\t\t\tthis.clearDragSource()\n\t\t\tthis.dragSourceOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragSourceRef = node as RefObject<any>\n\t\t\t} else {\n\t\t\t\tthis.dragSourceNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragSource()\n\t\t},\n\t\tdragPreview: (node: any, options?: DragPreviewOptions) => {\n\t\t\tthis.clearDragPreview()\n\t\t\tthis.dragPreviewOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragPreviewRef = node\n\t\t\t} else {\n\t\t\t\tthis.dragPreviewNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragPreview()\n\t\t},\n\t})\n\tprivate handlerId: Identifier | null = null\n\n\t// The drop target may either be attached via ref or connect function\n\tprivate dragSourceRef: RefObject<any> | null = null\n\tprivate dragSourceNode: any\n\tprivate dragSourceOptionsInternal: DragSourceOptions | null = null\n\tprivate dragSourceUnsubscribe: Unsubscribe | undefined\n\n\t// The drag preview may either be attached via ref or connect function\n\tprivate dragPreviewRef: RefObject<any> | null = null\n\tprivate dragPreviewNode: any\n\tprivate dragPreviewOptionsInternal: DragPreviewOptions | null = null\n\tprivate dragPreviewUnsubscribe: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDragSource: any = null\n\tprivate lastConnectedDragSourceOptions: any = null\n\tprivate lastConnectedDragPreview: any = null\n\tprivate lastConnectedDragPreviewOptions: any = null\n\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (this.handlerId === newHandlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dragSource\n\t}\n\n\tpublic get dragSourceOptions(): DragSourceOptions | null {\n\t\treturn this.dragSourceOptionsInternal\n\t}\n\tpublic set dragSourceOptions(options: DragSourceOptions | null) {\n\t\tthis.dragSourceOptionsInternal = options\n\t}\n\n\tpublic get dragPreviewOptions(): DragPreviewOptions | null {\n\t\treturn this.dragPreviewOptionsInternal\n\t}\n\n\tpublic set dragPreviewOptions(options: DragPreviewOptions | null) {\n\t\tthis.dragPreviewOptionsInternal = options\n\t}\n\n\tpublic reconnect(): void {\n\t\tconst didChange = this.reconnectDragSource()\n\t\tthis.reconnectDragPreview(didChange)\n\t}\n\n\tprivate reconnectDragSource(): boolean {\n\t\tconst dragSource = this.dragSource\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragSourceChange() ||\n\t\t\tthis.didDragSourceOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragSource()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn didChange\n\t\t}\n\t\tif (!dragSource) {\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\treturn didChange\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\tthis.lastConnectedDragSourceOptions = this.dragSourceOptions\n\t\t\tthis.dragSourceUnsubscribe = this.backend.connectDragSource(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragSource,\n\t\t\t\tthis.dragSourceOptions,\n\t\t\t)\n\t\t}\n\t\treturn didChange\n\t}\n\n\tprivate reconnectDragPreview(forceDidChange = false): void {\n\t\tconst dragPreview = this.dragPreview\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tforceDidChange ||\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragPreviewChange() ||\n\t\t\tthis.didDragPreviewOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragPreview()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dragPreview) {\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\tthis.lastConnectedDragPreviewOptions = this.dragPreviewOptions\n\t\t\tthis.dragPreviewUnsubscribe = this.backend.connectDragPreview(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragPreview,\n\t\t\t\tthis.dragPreviewOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didConnectedDragSourceChange(): boolean {\n\t\treturn this.lastConnectedDragSource !== this.dragSource\n\t}\n\n\tprivate didConnectedDragPreviewChange(): boolean {\n\t\treturn this.lastConnectedDragPreview !== this.dragPreview\n\t}\n\n\tprivate didDragSourceOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragSourceOptions,\n\t\t\tthis.dragSourceOptions,\n\t\t)\n\t}\n\n\tprivate didDragPreviewOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragPreviewOptions,\n\t\t\tthis.dragPreviewOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDragSource() {\n\t\tif (this.dragSourceUnsubscribe) {\n\t\t\tthis.dragSourceUnsubscribe()\n\t\t\tthis.dragSourceUnsubscribe = undefined\n\t\t}\n\t}\n\n\tpublic disconnectDragPreview() {\n\t\tif (this.dragPreviewUnsubscribe) {\n\t\t\tthis.dragPreviewUnsubscribe()\n\t\t\tthis.dragPreviewUnsubscribe = undefined\n\t\t\tthis.dragPreviewNode = null\n\t\t\tthis.dragPreviewRef = null\n\t\t}\n\t}\n\n\tprivate get dragSource() {\n\t\treturn (\n\t\t\tthis.dragSourceNode || (this.dragSourceRef && this.dragSourceRef.current)\n\t\t)\n\t}\n\n\tprivate get dragPreview() {\n\t\treturn (\n\t\t\tthis.dragPreviewNode ||\n\t\t\t(this.dragPreviewRef && this.dragPreviewRef.current)\n\t\t)\n\t}\n\n\tprivate clearDragSource() {\n\t\tthis.dragSourceNode = null\n\t\tthis.dragSourceRef = null\n\t}\n\n\tprivate clearDragPreview() {\n\t\tthis.dragPreviewNode = null\n\t\tthis.dragPreviewRef = null\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}