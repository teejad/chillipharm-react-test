{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reduce = reduce;\n\nvar _indexJs = require(\"../actions/dragDrop/index.js\");\n\nvar _registryJs = require(\"../actions/registry.js\");\n\nvar _equalityJs = require(\"../utils/equality.js\");\n\nvar _dirtinessJs = require(\"../utils/dirtiness.js\");\n\nvar _jsUtilsJs = require(\"../utils/js_utils.js\");\n\nfunction reduce() {\n  let _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _dirtinessJs.NONE;\n\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case _indexJs.HOVER:\n      break;\n\n    case _registryJs.ADD_SOURCE:\n    case _registryJs.ADD_TARGET:\n    case _registryJs.REMOVE_TARGET:\n    case _registryJs.REMOVE_SOURCE:\n      return _dirtinessJs.NONE;\n\n    case _indexJs.BEGIN_DRAG:\n    case _indexJs.PUBLISH_DRAG_SOURCE:\n    case _indexJs.END_DRAG:\n    case _indexJs.DROP:\n    default:\n      return _dirtinessJs.ALL;\n  }\n\n  const {\n    targetIds = [],\n    prevTargetIds = []\n  } = action.payload;\n  const result = (0, _jsUtilsJs).xor(targetIds, prevTargetIds);\n  const didChange = result.length > 0 || !(0, _equalityJs).areArraysEqual(targetIds, prevTargetIds);\n\n  if (!didChange) {\n    return _dirtinessJs.NONE;\n  } // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n\n\n  const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  const innermostTargetId = targetIds[targetIds.length - 1];\n\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":";;;;;QAyBgBA;;AAnBT,YAA8B,0CAA9B;;AAMA,eAAwB,oCAAxB;;AAEwB,eAAsB,kCAAtB;;AACL,gBAAuB,mCAAvB;;AACN,cAAsB,kCAAtB;;SASJA,SAIP;AAAA,MAFRC,MAEQ,uEAFQC,YAAI,KAEZ;;AAAA,MADRC,MACQ;;AACR,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKC,QAAK,MAAV;AACC;;AACD,SAAKC,WAAU,WAAf;AACA,SAAKC,WAAU,WAAf;AACA,SAAKC,WAAa,cAAlB;AACA,SAAKC,WAAa,cAAlB;AACC,aAAOP,YAAI,KAAX;;AACD,SAAKQ,QAAU,WAAf;AACA,SAAKC,QAAmB,oBAAxB;AACA,SAAKC,QAAQ,SAAb;AACA,SAAKC,QAAI,KAAT;;AAEC,aAAOC,YAAG,IAAV;AAbF;;AAgBA,QAAM;AAAEC,aAAS,GAAG,EAAd;AAAkBC,iBAAa,GAAG;AAAlC,MAAyCb,MAAM,CAACc,OAAtD;AACA,QAAMC,MAAM,OAAGC,UAAH,EAAMA,GAAN,CAAOJ,SAAP,EAAkBC,aAAlB,CAAZ;AACA,QAAMI,SAAS,GACdF,MAAM,CAACG,MAAPH,GAAgB,CAAhBA,IAAiB,KAAKI,WAAL,EAAmBA,cAAnB,CAAoBP,SAApB,EAA+BC,aAA/B,CADlB;;AAGA,MAAE,CAAGI,SAAL,EAAgB;AACf,WAAOlB,YAAI,KAAX;AACA,GAxBO,CA0BR;AACA;;;AACA,QAAMqB,qBAAqB,GAAGP,aAAa,CAACA,aAAa,CAACK,MAAdL,GAAuB,CAAxB,CAA3C;AACA,QAAMQ,iBAAiB,GAAGT,SAAS,CAACA,SAAS,CAACM,MAAVN,GAAmB,CAApB,CAAnC;;AACA,MAAIQ,qBAAqB,KAAKC,iBAA9B,EAAiD;AAChD,QAAID,qBAAJ,EAA2B;AAC1BL,YAAM,CAACO,IAAPP,CAAYK,qBAAZL;AACA;;AACD,QAAIM,iBAAJ,EAAuB;AACtBN,YAAM,CAACO,IAAPP,CAAYM,iBAAZN;AACA;AACD;;AAED,SAAOA,MAAP;AACA","names":["reduce","_state","NONE","action","type","HOVER","ADD_SOURCE","ADD_TARGET","REMOVE_TARGET","REMOVE_SOURCE","BEGIN_DRAG","PUBLISH_DRAG_SOURCE","END_DRAG","DROP","ALL","targetIds","prevTargetIds","payload","result","xor","didChange","length","areArraysEqual","prevInnermostTargetId","innermostTargetId","push"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/dnd-core/src/reducers/dirtyHandlerIds.ts"],"sourcesContent":["import {\n\tBEGIN_DRAG,\n\tPUBLISH_DRAG_SOURCE,\n\tHOVER,\n\tEND_DRAG,\n\tDROP,\n} from '../actions/dragDrop/index.js'\nimport {\n\tADD_SOURCE,\n\tADD_TARGET,\n\tREMOVE_SOURCE,\n\tREMOVE_TARGET,\n} from '../actions/registry.js'\nimport type { Action } from '../interfaces.js'\nimport { areArraysEqual } from '../utils/equality.js'\nimport { NONE, ALL } from '../utils/dirtiness.js'\nimport { xor } from '../utils/js_utils.js'\n\nexport type State = string[]\n\nexport interface DirtyHandlerIdPayload {\n\ttargetIds: string[]\n\tprevTargetIds: string[]\n}\n\nexport function reduce(\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t_state: State = NONE,\n\taction: Action<DirtyHandlerIdPayload>,\n): State {\n\tswitch (action.type) {\n\t\tcase HOVER:\n\t\t\tbreak\n\t\tcase ADD_SOURCE:\n\t\tcase ADD_TARGET:\n\t\tcase REMOVE_TARGET:\n\t\tcase REMOVE_SOURCE:\n\t\t\treturn NONE\n\t\tcase BEGIN_DRAG:\n\t\tcase PUBLISH_DRAG_SOURCE:\n\t\tcase END_DRAG:\n\t\tcase DROP:\n\t\tdefault:\n\t\t\treturn ALL\n\t}\n\n\tconst { targetIds = [], prevTargetIds = [] } = action.payload\n\tconst result = xor(targetIds, prevTargetIds)\n\tconst didChange =\n\t\tresult.length > 0 || !areArraysEqual(targetIds, prevTargetIds)\n\n\tif (!didChange) {\n\t\treturn NONE\n\t}\n\n\t// Check the target ids at the innermost position. If they are valid, add them\n\t// to the result\n\tconst prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1]\n\tconst innermostTargetId = targetIds[targetIds.length - 1]\n\tif (prevInnermostTargetId !== innermostTargetId) {\n\t\tif (prevInnermostTargetId) {\n\t\t\tresult.push(prevInnermostTargetId)\n\t\t}\n\t\tif (innermostTargetId) {\n\t\t\tresult.push(innermostTargetId)\n\t\t}\n\t}\n\n\treturn result\n}\n"]},"metadata":{},"sourceType":"script"}