{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDragLayer = useDragLayer;\n\nvar _react = require(\"react\");\n\nvar _useDragDropManagerJs = require(\"./useDragDropManager.js\");\n\nvar _useCollectorJs = require(\"./useCollector.js\");\n\nfunction useDragLayer(collect) {\n  const dragDropManager = (0, _useDragDropManagerJs).useDragDropManager();\n  const monitor = dragDropManager.getMonitor();\n  const [collected, updateCollected] = (0, _useCollectorJs).useCollector(monitor, collect);\n  (0, _react).useEffect(() => monitor.subscribeToOffsetChange(updateCollected));\n  (0, _react).useEffect(() => monitor.subscribeToStateChange(updateCollected));\n  return collected;\n}","map":{"version":3,"mappings":";;;;;QASgBA;;AATU,UAAO,mBAAP;;AAES,yBAAyB,qCAAzB;;AACN,mBAAmB,+BAAnB;;SAMbA,aACfC,SACiB;AACjB,QAAMC,eAAe,OAAGC,qBAAH,EAAqBA,kBAArB,EAArB;AACA,QAAMC,OAAO,GAAGF,eAAe,CAACG,UAAhBH,EAAhB;AACA,QAAK,CAAEI,SAAF,EAAaC,eAAb,IAA4B,IAAIC,eAAJ,EAAgBA,YAAhB,CAAiBJ,OAAjB,EAA0BH,OAA1B,CAAjC;MAEAQ,QAASA,gBAAOL,OAAO,CAACM,uBAARN,CAAgCG,eAAhCH;MAChBK,QAASA,gBAAOL,OAAO,CAACO,sBAARP,CAA+BG,eAA/BH;AAChB,SAAOE,SAAP;AACA","names":["useDragLayer","collect","dragDropManager","useDragDropManager","monitor","getMonitor","collected","updateCollected","useCollector","useEffect","subscribeToOffsetChange","subscribeToStateChange"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/react-dnd/src/hooks/useDragLayer.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport type { DragLayerMonitor } from '../types/index.js'\nimport { useDragDropManager } from './useDragDropManager.js'\nimport { useCollector } from './useCollector.js'\n\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\nexport function useDragLayer<CollectedProps, DragObject = any>(\n\tcollect: (monitor: DragLayerMonitor<DragObject>) => CollectedProps,\n): CollectedProps {\n\tconst dragDropManager = useDragDropManager()\n\tconst monitor = dragDropManager.getMonitor()\n\tconst [collected, updateCollected] = useCollector(monitor, collect)\n\n\tuseEffect(() => monitor.subscribeToOffsetChange(updateCollected))\n\tuseEffect(() => monitor.subscribeToStateChange(updateCollected))\n\treturn collected\n}\n"]},"metadata":{},"sourceType":"script"}