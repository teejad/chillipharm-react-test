{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDragDropManager = createDragDropManager;\n\nvar _dragDropManagerImplJs = require(\"./classes/DragDropManagerImpl.js\");\n\nvar _redux = require(\"redux\");\n\nvar _indexJs = require(\"./reducers/index.js\");\n\nvar _dragDropMonitorImplJs = require(\"./classes/DragDropMonitorImpl.js\");\n\nvar _handlerRegistryImplJs = require(\"./classes/HandlerRegistryImpl.js\");\n\nfunction createDragDropManager(backendFactory) {\n  let globalContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let backendOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let debugMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const store = makeStoreInstance(debugMode);\n  const monitor = new _dragDropMonitorImplJs.DragDropMonitorImpl(store, new _handlerRegistryImplJs.HandlerRegistryImpl(store));\n  const manager = new _dragDropManagerImplJs.DragDropManagerImpl(store, monitor);\n  const backend = backendFactory(manager, globalContext, backendOptions);\n  manager.receiveBackend(backend);\n  return manager;\n}\n\nfunction makeStoreInstance(debugMode) {\n  // TODO: if we ever make a react-native version of this,\n  // we'll need to consider how to pull off dev-tooling\n  const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;\n  return (0, _redux).createStore(_indexJs.reduce, debugMode && reduxDevTools && reduxDevTools({\n    name: 'dnd-core',\n    instanceId: 'dnd-core'\n  }));\n}","map":{"version":3,"mappings":";;;;;QAOgBA;;AAPoB,0BAAkC,8CAAlC;;AAED,UAAO,mBAAP;;AACL,YAAqB,iCAArB;;AACM,0BAAkC,8CAAlC;;AACA,0BAAkC,8CAAlC;;SAEpBA,sBACfC,gBAIkB;AAAA,MAHlBC,aAGkB,uEAHOC,SAGP;AAAA,MAFlBC,cAEkB,uEAFQ,EAER;AAAA,MADlBC,SACkB,uEADN,KACM;AAClB,QAAMC,KAAK,GAAGC,iBAAiB,CAACF,SAAD,CAA/B;AACA,QAAMG,OAAO,GAAG,IAAIC,sBAAmB,oBAAvB,CAAwBH,KAAxB,EAA+B,IAAII,sBAAmB,oBAAvB,CAAwBJ,KAAxB,CAA/B,CAAhB;AACA,QAAMK,OAAO,GAAG,IAAIC,sBAAmB,oBAAvB,CAAwBN,KAAxB,EAA+BE,OAA/B,CAAhB;AACA,QAAMK,OAAO,GAAGZ,cAAc,CAACU,OAAD,EAAUT,aAAV,EAAyBE,cAAzB,CAA9B;AACAO,SAAO,CAACG,cAARH,CAAuBE,OAAvBF;AACA,SAAOA,OAAP;AACA;;SAEQJ,kBAAkBF,WAAkC;AAC5D;AACA;AACA,QAAMU,aAAa,GAClB,OAAOC,MAAP,KAAkB,WAAlB,IACCA,MAAM,CAASC,4BAFjB;AAGA,SAAM,IAACC,MAAD,EAAYA,WAAZ,CACLC,QAAM,OADD,EAELd,SAAS,IACRU,aADDV,IAECU,aAAa,CAAC;AACbK,QAAI,EAAE,UADO;AAEbC,cAAU,EAAE;AAFC,GAAD,CAJT,CAAN;AASA","names":["createDragDropManager","backendFactory","globalContext","undefined","backendOptions","debugMode","store","makeStoreInstance","monitor","DragDropMonitorImpl","HandlerRegistryImpl","manager","DragDropManagerImpl","backend","receiveBackend","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","reduce","name","instanceId"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/dnd-core/src/createDragDropManager.ts"],"sourcesContent":["import { DragDropManagerImpl } from './classes/DragDropManagerImpl.js'\nimport type { DragDropManager, BackendFactory } from './interfaces.js'\nimport { createStore, Store } from 'redux'\nimport { reduce, State } from './reducers/index.js'\nimport { DragDropMonitorImpl } from './classes/DragDropMonitorImpl.js'\nimport { HandlerRegistryImpl } from './classes/HandlerRegistryImpl.js'\n\nexport function createDragDropManager(\n\tbackendFactory: BackendFactory,\n\tglobalContext: unknown = undefined,\n\tbackendOptions: unknown = {},\n\tdebugMode = false,\n): DragDropManager {\n\tconst store = makeStoreInstance(debugMode)\n\tconst monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store))\n\tconst manager = new DragDropManagerImpl(store, monitor)\n\tconst backend = backendFactory(manager, globalContext, backendOptions)\n\tmanager.receiveBackend(backend)\n\treturn manager\n}\n\nfunction makeStoreInstance(debugMode: boolean): Store<State> {\n\t// TODO: if we ever make a react-native version of this,\n\t// we'll need to consider how to pull off dev-tooling\n\tconst reduxDevTools =\n\t\ttypeof window !== 'undefined' &&\n\t\t(window as any).__REDUX_DEVTOOLS_EXTENSION__\n\treturn createStore(\n\t\treduce,\n\t\tdebugMode &&\n\t\t\treduxDevTools &&\n\t\t\treduxDevTools({\n\t\t\t\tname: 'dnd-core',\n\t\t\t\tinstanceId: 'dnd-core',\n\t\t\t}),\n\t)\n}\n"]},"metadata":{},"sourceType":"script"}