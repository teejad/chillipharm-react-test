{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass MonotonicInterpolant {\n  interpolate(x) {\n    const {\n      xs,\n      ys,\n      c1s,\n      c2s,\n      c3s\n    } = this; // The rightmost point in the dataset should give an exact result\n\n    let i = xs.length - 1;\n\n    if (x === xs[i]) {\n      return ys[i];\n    } // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\n\n    let low = 0;\n    let high = c3s.length - 1;\n    let mid;\n\n    while (low <= high) {\n      mid = Math.floor(0.5 * (low + high));\n      const xHere = xs[mid];\n\n      if (xHere < x) {\n        low = mid + 1;\n      } else if (xHere > x) {\n        high = mid - 1;\n      } else {\n        return ys[mid];\n      }\n    }\n\n    i = Math.max(0, high); // Interpolate\n\n    const diff = x - xs[i];\n    const diffSq = diff * diff;\n    return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n  }\n\n  constructor(xs, ys) {\n    const {\n      length\n    } = xs; // Rearrange xs and ys so that xs is sorted\n\n    const indexes = [];\n\n    for (let i = 0; i < length; i++) {\n      indexes.push(i);\n    }\n\n    indexes.sort((a, b) => xs[a] < xs[b] ? -1 : 1); // Get consecutive differences and slopes\n\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    let dx;\n    let dy;\n\n    for (let i1 = 0; i1 < length - 1; i1++) {\n      dx = xs[i1 + 1] - xs[i1];\n      dy = ys[i1 + 1] - ys[i1];\n      dxs.push(dx);\n      dys.push(dy);\n      ms.push(dy / dx);\n    } // Get degree-1 coefficients\n\n\n    const c1s = [ms[0]];\n\n    for (let i2 = 0; i2 < dxs.length - 1; i2++) {\n      const m2 = ms[i2];\n      const mNext = ms[i2 + 1];\n\n      if (m2 * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        dx = dxs[i2];\n        const dxNext = dxs[i2 + 1];\n        const common = dx + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n      }\n    }\n\n    c1s.push(ms[ms.length - 1]); // Get degree-2 and degree-3 coefficients\n\n    const c2s = [];\n    const c3s = [];\n    let m;\n\n    for (let i3 = 0; i3 < c1s.length - 1; i3++) {\n      m = ms[i3];\n      const c1 = c1s[i3];\n      const invDx = 1 / dxs[i3];\n      const common = c1 + c1s[i3 + 1] - m - m;\n      c2s.push((m - c1 - common) * invDx);\n      c3s.push(common * invDx * invDx);\n    }\n\n    this.xs = xs;\n    this.ys = ys;\n    this.c1s = c1s;\n    this.c2s = c2s;\n    this.c3s = c3s;\n  }\n\n}\n\nexports.MonotonicInterpolant = MonotonicInterpolant;","map":{"version":3,"mappings":"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","names":["MonotonicInterpolant","interpolate","x","xs","ys","c1s","c2s","c3s","i","length","low","high","mid","Math","floor","xHere","max","diff","diffSq","indexes","push","sort","a","b","dys","dxs","ms","dx","dy","m2","mNext","dxNext","common","m","c1","invDx"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/react-dnd-html5-backend/src/MonotonicInterpolant.ts"],"sourcesContent":["export class MonotonicInterpolant {\n\tprivate xs: any\n\tprivate ys: any\n\tprivate c1s: any\n\tprivate c2s: any\n\tprivate c3s: any\n\n\tpublic constructor(xs: number[], ys: number[]) {\n\t\tconst { length } = xs\n\n\t\t// Rearrange xs and ys so that xs is sorted\n\t\tconst indexes = []\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tindexes.push(i)\n\t\t}\n\t\tindexes.sort((a, b) => ((xs[a] as number) < (xs[b] as number) ? -1 : 1))\n\n\t\t// Get consecutive differences and slopes\n\t\tconst dys = []\n\t\tconst dxs = []\n\t\tconst ms = []\n\t\tlet dx\n\t\tlet dy\n\t\tfor (let i = 0; i < length - 1; i++) {\n\t\t\tdx = (xs[i + 1] as number) - (xs[i] as number)\n\t\t\tdy = (ys[i + 1] as number) - (ys[i] as number)\n\t\t\tdxs.push(dx)\n\t\t\tdys.push(dy)\n\t\t\tms.push(dy / dx)\n\t\t}\n\n\t\t// Get degree-1 coefficients\n\t\tconst c1s = [ms[0]]\n\t\tfor (let i = 0; i < dxs.length - 1; i++) {\n\t\t\tconst m2 = ms[i] as number\n\t\t\tconst mNext = ms[i + 1] as number\n\t\t\tif (m2 * mNext <= 0) {\n\t\t\t\tc1s.push(0)\n\t\t\t} else {\n\t\t\t\tdx = dxs[i] as number\n\t\t\t\tconst dxNext = dxs[i + 1] as number\n\t\t\t\tconst common = dx + dxNext\n\t\t\t\tc1s.push(\n\t\t\t\t\t(3 * common) / ((common + dxNext) / m2 + (common + dx) / mNext),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tc1s.push(ms[ms.length - 1])\n\n\t\t// Get degree-2 and degree-3 coefficients\n\t\tconst c2s = []\n\t\tconst c3s = []\n\t\tlet m\n\t\tfor (let i = 0; i < c1s.length - 1; i++) {\n\t\t\tm = ms[i] as number\n\t\t\tconst c1 = c1s[i] as number\n\t\t\tconst invDx = 1 / (dxs[i] as number)\n\t\t\tconst common = c1 + (c1s[i + 1] as number) - m - m\n\t\t\tc2s.push((m - c1 - common) * invDx)\n\t\t\tc3s.push(common * invDx * invDx)\n\t\t}\n\n\t\tthis.xs = xs\n\t\tthis.ys = ys\n\t\tthis.c1s = c1s\n\t\tthis.c2s = c2s\n\t\tthis.c3s = c3s\n\t}\n\n\tpublic interpolate(x: number): number {\n\t\tconst { xs, ys, c1s, c2s, c3s } = this\n\n\t\t// The rightmost point in the dataset should give an exact result\n\t\tlet i = xs.length - 1\n\t\tif (x === xs[i]) {\n\t\t\treturn ys[i]\n\t\t}\n\n\t\t// Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\t\tlet low = 0\n\t\tlet high = c3s.length - 1\n\t\tlet mid\n\t\twhile (low <= high) {\n\t\t\tmid = Math.floor(0.5 * (low + high))\n\t\t\tconst xHere = xs[mid]\n\t\t\tif (xHere < x) {\n\t\t\t\tlow = mid + 1\n\t\t\t} else if (xHere > x) {\n\t\t\t\thigh = mid - 1\n\t\t\t} else {\n\t\t\t\treturn ys[mid]\n\t\t\t}\n\t\t}\n\t\ti = Math.max(0, high)\n\n\t\t// Interpolate\n\t\tconst diff = x - xs[i]\n\t\tconst diffSq = diff * diff\n\t\treturn ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}