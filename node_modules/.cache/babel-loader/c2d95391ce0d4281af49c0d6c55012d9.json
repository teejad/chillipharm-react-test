{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSourceContract = validateSourceContract;\nexports.validateTargetContract = validateTargetContract;\nexports.validateType = validateType;\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nfunction validateSourceContract(source) {\n  (0, _invariant).invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n  (0, _invariant).invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n  (0, _invariant).invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\n\nfunction validateTargetContract(target) {\n  (0, _invariant).invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n  (0, _invariant).invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n  (0, _invariant).invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\n\nfunction validateType(type, allowArray) {\n  if (allowArray && Array.isArray(type)) {\n    type.forEach(t => validateType(t, false));\n    return;\n  }\n\n  (0, _invariant).invariant(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');\n}","map":{"version":3,"mappings":";;;;;QAGgBA;QAeAC;QAeAC;;AAjCU,cAAsB,kCAAtB;;SAGVF,uBAAuBG,QAA0B;MAChEC,YAASA,UACR,OAAOD,MAAM,CAACE,OAAd,KAA0B,YAC1B;MAEDD,YAASA,UACR,OAAOD,MAAM,CAACG,SAAd,KAA4B,YAC5B;MAEDF,YAASA,UACR,OAAOD,MAAM,CAACI,OAAd,KAA0B,YAC1B;AAED;;SAEeN,uBAAuBO,QAA0B;MAChEJ,YAASA,UACR,OAAOI,MAAM,CAACC,OAAd,KAA0B,YAC1B;MAEDL,YAASA,UACR,OAAOI,MAAM,CAACE,KAAd,KAAwB,YACxB;MAEDN,YAASA,UACR,OAAOI,MAAM,CAACG,IAAd,KAAuB,YACvB;AAED;;SAEeT,aACfU,MACAC,YACO;AACP,MAAIA,UAAU,IAAIC,KAAK,CAACC,OAAND,CAAcF,IAAdE,CAAlB,EAAuC;AACtCF,QAAI,CAACI,OAALJ,CAAcK,CAAF,IAAQf,YAAY,CAACe,CAAD,EAAI,KAAJ,CAAhCL;AACA;AACA;;MAEDR,YAASA,UACR,OAAOQ,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAC5CC,UAAU,GACP,6DADO,GAEP;AAEJ","names":["validateSourceContract","validateTargetContract","validateType","source","invariant","canDrag","beginDrag","endDrag","target","canDrop","hover","drop","type","allowArray","Array","isArray","forEach","t"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/dnd-core/src/contracts.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { DragSource, DropTarget, Identifier } from './interfaces.js'\n\nexport function validateSourceContract(source: DragSource): void {\n\tinvariant(\n\t\ttypeof source.canDrag === 'function',\n\t\t'Expected canDrag to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof source.beginDrag === 'function',\n\t\t'Expected beginDrag to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof source.endDrag === 'function',\n\t\t'Expected endDrag to be a function.',\n\t)\n}\n\nexport function validateTargetContract(target: DropTarget): void {\n\tinvariant(\n\t\ttypeof target.canDrop === 'function',\n\t\t'Expected canDrop to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof target.hover === 'function',\n\t\t'Expected hover to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof target.drop === 'function',\n\t\t'Expected beginDrag to be a function.',\n\t)\n}\n\nexport function validateType(\n\ttype: Identifier | Identifier[],\n\tallowArray?: boolean,\n): void {\n\tif (allowArray && Array.isArray(type)) {\n\t\ttype.forEach((t) => validateType(t, false))\n\t\treturn\n\t}\n\n\tinvariant(\n\t\ttypeof type === 'string' || typeof type === 'symbol',\n\t\tallowArray\n\t\t\t? 'Type can only be a string, a symbol, or an array of either.'\n\t\t\t: 'Type can only be a string or a symbol.',\n\t)\n}\n"]},"metadata":{},"sourceType":"script"}