{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reduce = reduce;\n\nvar _dragOffsetJs = require(\"./dragOffset.js\");\n\nvar _dragOperationJs = require(\"./dragOperation.js\");\n\nvar _refCountJs = require(\"./refCount.js\");\n\nvar _dirtyHandlerIdsJs = require(\"./dirtyHandlerIds.js\");\n\nvar _stateIdJs = require(\"./stateId.js\");\n\nvar _jsUtilsJs = require(\"../utils/js_utils.js\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction reduce() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    dirtyHandlerIds: (0, _dirtyHandlerIdsJs).reduce(state.dirtyHandlerIds, {\n      type: action.type,\n      payload: _objectSpread({}, action.payload, {\n        prevTargetIds: (0, _jsUtilsJs).get(state, 'dragOperation.targetIds', [])\n      })\n    }),\n    dragOffset: (0, _dragOffsetJs).reduce(state.dragOffset, action),\n    refCount: (0, _refCountJs).reduce(state.refCount, action),\n    dragOperation: (0, _dragOperationJs).reduce(state.dragOperation, action),\n    stateId: (0, _stateIdJs).reduce(state.stateId)\n  };\n}","map":{"version":3,"mappings":";;;;;QAsBgBA;;AAtB+C,iBAAiB,6BAAjB;;AAIxD,oBAAoB,gCAApB;;AACoD,eAAe,2BAAf;;AAIpD,sBAAsB,kCAAtB;;AACkD,cAAc,0BAAd;;AACrC,cAAsB,kCAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAWJA,SAA+D;AAAA,MAAxDC,KAAwD,uEAAzC,EAAyC;AAAA,MAA5BC,MAA4B;AAC9E,SAAO;AACNC,mBAAe,MAAEA,kBAAF,EAAiBH,MAAjB,CAAkBC,KAAK,CAACE,eAAxB,EAAyC;AACvDC,UAAI,EAAEF,MAAM,CAACE,IAD0C;AAEvDC,aAAO,oBACHH,MAAM,CAACG,OADJ,EACW;AACjBC,qBAAa,MAAEC,UAAF,EAAKA,GAAL,CAAgBN,KAAhB,EAAuB,yBAAvB,EAAkD,EAAlD;AADI,OADX;AAFgD,KAAzC,CADT;AAQNO,cAAU,MAAEA,aAAF,EAAYR,MAAZ,CAAaC,KAAK,CAACO,UAAnB,EAA+BN,MAA/B,CARJ;AASNO,YAAQ,MAAEA,WAAF,EAAUT,MAAV,CAAWC,KAAK,CAACQ,QAAjB,EAA2BP,MAA3B,CATF;AAUNQ,iBAAa,MAAEA,gBAAF,EAAeV,MAAf,CAAgBC,KAAK,CAACS,aAAtB,EAAqCR,MAArC,CAVP;AAWNS,WAAO,MAAEA,UAAF,EAASX,MAAT,CAAUC,KAAK,CAACU,OAAhB;AAXD,GAAP;AAaA","names":["reduce","state","action","dirtyHandlerIds","type","payload","prevTargetIds","get","dragOffset","refCount","dragOperation","stateId"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/dnd-core/src/reducers/index.ts"],"sourcesContent":["import { reduce as dragOffset, State as DragOffsetState } from './dragOffset.js'\nimport {\n\treduce as dragOperation,\n\tState as DragOperationState,\n} from './dragOperation.js'\nimport { reduce as refCount, State as RefCountState } from './refCount.js'\nimport {\n\treduce as dirtyHandlerIds,\n\tState as DirtyHandlerIdsState,\n} from './dirtyHandlerIds.js'\nimport { reduce as stateId, State as StateIdState } from './stateId.js'\nimport { get } from '../utils/js_utils.js'\nimport type { Action } from '../interfaces.js'\n\nexport interface State {\n\tdirtyHandlerIds: DirtyHandlerIdsState\n\tdragOffset: DragOffsetState\n\trefCount: RefCountState\n\tdragOperation: DragOperationState\n\tstateId: StateIdState\n}\n\nexport function reduce(state: State = {} as State, action: Action<any>): State {\n\treturn {\n\t\tdirtyHandlerIds: dirtyHandlerIds(state.dirtyHandlerIds, {\n\t\t\ttype: action.type,\n\t\t\tpayload: {\n\t\t\t\t...action.payload,\n\t\t\t\tprevTargetIds: get<string[]>(state, 'dragOperation.targetIds', []),\n\t\t\t},\n\t\t}),\n\t\tdragOffset: dragOffset(state.dragOffset, action),\n\t\trefCount: refCount(state.refCount, action),\n\t\tdragOperation: dragOperation(state.dragOperation, action),\n\t\tstateId: stateId(state.stateId),\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}