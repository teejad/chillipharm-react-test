{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nlet isCallingCanDrag = false;\nlet isCallingIsDragging = false;\n\nclass DragSourceMonitorImpl {\n  receiveHandlerId(sourceId) {\n    this.sourceId = sourceId;\n  }\n\n  getHandlerId() {\n    return this.sourceId;\n  }\n\n  canDrag() {\n    (0, _invariant).invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingCanDrag = true;\n      return this.internalMonitor.canDragSource(this.sourceId);\n    } finally {\n      isCallingCanDrag = false;\n    }\n  }\n\n  isDragging() {\n    if (!this.sourceId) {\n      return false;\n    }\n\n    (0, _invariant).invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingIsDragging = true;\n      return this.internalMonitor.isDraggingSource(this.sourceId);\n    } finally {\n      isCallingIsDragging = false;\n    }\n  }\n\n  subscribeToStateChange(listener, options) {\n    return this.internalMonitor.subscribeToStateChange(listener, options);\n  }\n\n  isDraggingSource(sourceId) {\n    return this.internalMonitor.isDraggingSource(sourceId);\n  }\n\n  isOverTarget(targetId, options) {\n    return this.internalMonitor.isOverTarget(targetId, options);\n  }\n\n  getTargetIds() {\n    return this.internalMonitor.getTargetIds();\n  }\n\n  isSourcePublic() {\n    return this.internalMonitor.isSourcePublic();\n  }\n\n  getSourceId() {\n    return this.internalMonitor.getSourceId();\n  }\n\n  subscribeToOffsetChange(listener) {\n    return this.internalMonitor.subscribeToOffsetChange(listener);\n  }\n\n  canDragSource(sourceId) {\n    return this.internalMonitor.canDragSource(sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    return this.internalMonitor.canDropOnTarget(targetId);\n  }\n\n  getItemType() {\n    return this.internalMonitor.getItemType();\n  }\n\n  getItem() {\n    return this.internalMonitor.getItem();\n  }\n\n  getDropResult() {\n    return this.internalMonitor.getDropResult();\n  }\n\n  didDrop() {\n    return this.internalMonitor.didDrop();\n  }\n\n  getInitialClientOffset() {\n    return this.internalMonitor.getInitialClientOffset();\n  }\n\n  getInitialSourceClientOffset() {\n    return this.internalMonitor.getInitialSourceClientOffset();\n  }\n\n  getSourceClientOffset() {\n    return this.internalMonitor.getSourceClientOffset();\n  }\n\n  getClientOffset() {\n    return this.internalMonitor.getClientOffset();\n  }\n\n  getDifferenceFromInitialOffset() {\n    return this.internalMonitor.getDifferenceFromInitialOffset();\n  }\n\n  constructor(manager) {\n    this.sourceId = null;\n    this.internalMonitor = manager.getMonitor();\n  }\n\n}\n\nexports.DragSourceMonitorImpl = DragSourceMonitorImpl;","map":{"version":3,"mappings":"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","names":["isCallingCanDrag","isCallingIsDragging","DragSourceMonitorImpl","receiveHandlerId","sourceId","getHandlerId","canDrag","invariant","internalMonitor","canDragSource","isDragging","isDraggingSource","subscribeToStateChange","listener","options","isOverTarget","targetId","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset","manager","getMonitor"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/react-dnd/src/internals/DragSourceMonitorImpl.ts"],"sourcesContent":["import type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tUnsubscribe,\n\tListener,\n\tIdentifier,\n\tXYCoord,\n} from 'dnd-core'\nimport { invariant } from '@react-dnd/invariant'\nimport type { DragSourceMonitor } from '../types/index.js'\n\nlet isCallingCanDrag = false\nlet isCallingIsDragging = false\n\nexport class DragSourceMonitorImpl implements DragSourceMonitor {\n\tprivate internalMonitor: DragDropMonitor\n\tprivate sourceId: Identifier | null = null\n\n\tpublic constructor(manager: DragDropManager) {\n\t\tthis.internalMonitor = manager.getMonitor()\n\t}\n\n\tpublic receiveHandlerId(sourceId: Identifier | null): void {\n\t\tthis.sourceId = sourceId\n\t}\n\n\tpublic getHandlerId(): Identifier | null {\n\t\treturn this.sourceId\n\t}\n\n\tpublic canDrag(): boolean {\n\t\tinvariant(\n\t\t\t!isCallingCanDrag,\n\t\t\t'You may not call monitor.canDrag() inside your canDrag() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingCanDrag = true\n\t\t\treturn this.internalMonitor.canDragSource(this.sourceId as Identifier)\n\t\t} finally {\n\t\t\tisCallingCanDrag = false\n\t\t}\n\t}\n\n\tpublic isDragging(): boolean {\n\t\tif (!this.sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tinvariant(\n\t\t\t!isCallingIsDragging,\n\t\t\t'You may not call monitor.isDragging() inside your isDragging() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingIsDragging = true\n\t\t\treturn this.internalMonitor.isDraggingSource(this.sourceId)\n\t\t} finally {\n\t\t\tisCallingIsDragging = false\n\t\t}\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions?: { handlerIds?: Identifier[] },\n\t): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToStateChange(listener, options)\n\t}\n\n\tpublic isDraggingSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.isDraggingSource(sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: Identifier,\n\t\toptions?: { shallow: boolean },\n\t): boolean {\n\t\treturn this.internalMonitor.isOverTarget(targetId, options)\n\t}\n\n\tpublic getTargetIds(): Identifier[] {\n\t\treturn this.internalMonitor.getTargetIds()\n\t}\n\n\tpublic isSourcePublic(): boolean | null {\n\t\treturn this.internalMonitor.isSourcePublic()\n\t}\n\n\tpublic getSourceId(): Identifier | null {\n\t\treturn this.internalMonitor.getSourceId()\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToOffsetChange(listener)\n\t}\n\n\tpublic canDragSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDragSource(sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDropOnTarget(targetId)\n\t}\n\n\tpublic getItemType(): Identifier | null {\n\t\treturn this.internalMonitor.getItemType()\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.internalMonitor.getItem()\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.internalMonitor.getDropResult()\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.internalMonitor.didDrop()\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialClientOffset()\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialSourceClientOffset()\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getSourceClientOffset()\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getClientOffset()\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getDifferenceFromInitialOffset()\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}