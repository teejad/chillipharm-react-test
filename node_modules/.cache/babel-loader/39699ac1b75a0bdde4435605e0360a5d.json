{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _enterLeaveCounterJs = require(\"./EnterLeaveCounter.js\");\n\nvar _offsetUtilsJs = require(\"./OffsetUtils.js\");\n\nvar _indexJs = require(\"./NativeDragSources/index.js\");\n\nvar NativeTypes = _interopRequireWildcard(require(\"./NativeTypes.js\"));\n\nvar _optionsReaderJs = require(\"./OptionsReader.js\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nclass HTML5BackendImpl {\n  /**\n  * Generate profiling statistics for the HTML5Backend.\n  */\n  profile() {\n    var ref, ref1;\n    return {\n      sourcePreviewNodes: this.sourcePreviewNodes.size,\n      sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n      sourceNodeOptions: this.sourceNodeOptions.size,\n      sourceNodes: this.sourceNodes.size,\n      dragStartSourceIds: ((ref = this.dragStartSourceIds) === null || ref === void 0 ? void 0 : ref.length) || 0,\n      dropTargetIds: this.dropTargetIds.length,\n      dragEnterTargetIds: this.dragEnterTargetIds.length,\n      dragOverTargetIds: ((ref1 = this.dragOverTargetIds) === null || ref1 === void 0 ? void 0 : ref1.length) || 0\n    };\n  } // public for test\n\n\n  get window() {\n    return this.options.window;\n  }\n\n  get document() {\n    return this.options.document;\n  }\n  /**\n  * Get the root element to use for event subscriptions\n  */\n\n\n  get rootElement() {\n    return this.options.rootElement;\n  }\n\n  setup() {\n    const root = this.rootElement;\n\n    if (root === undefined) {\n      return;\n    }\n\n    if (root.__isReactDndBackendSetUp) {\n      throw new Error('Cannot have two HTML5 backends at the same time.');\n    }\n\n    root.__isReactDndBackendSetUp = true;\n    this.addEventListeners(root);\n  }\n\n  teardown() {\n    const root = this.rootElement;\n\n    if (root === undefined) {\n      return;\n    }\n\n    root.__isReactDndBackendSetUp = false;\n    this.removeEventListeners(this.rootElement);\n    this.clearCurrentDragSourceNode();\n\n    if (this.asyncEndDragFrameId) {\n      var ref;\n      (ref = this.window) === null || ref === void 0 ? void 0 : ref.cancelAnimationFrame(this.asyncEndDragFrameId);\n    }\n  }\n\n  connectDragPreview(sourceId, node, options) {\n    this.sourcePreviewNodeOptions.set(sourceId, options);\n    this.sourcePreviewNodes.set(sourceId, node);\n    return () => {\n      this.sourcePreviewNodes.delete(sourceId);\n      this.sourcePreviewNodeOptions.delete(sourceId);\n    };\n  }\n\n  connectDragSource(sourceId, node, options) {\n    this.sourceNodes.set(sourceId, node);\n    this.sourceNodeOptions.set(sourceId, options);\n\n    const handleDragStart = e => this.handleDragStart(e, sourceId);\n\n    const handleSelectStart = e => this.handleSelectStart(e);\n\n    node.setAttribute('draggable', 'true');\n    node.addEventListener('dragstart', handleDragStart);\n    node.addEventListener('selectstart', handleSelectStart);\n    return () => {\n      this.sourceNodes.delete(sourceId);\n      this.sourceNodeOptions.delete(sourceId);\n      node.removeEventListener('dragstart', handleDragStart);\n      node.removeEventListener('selectstart', handleSelectStart);\n      node.setAttribute('draggable', 'false');\n    };\n  }\n\n  connectDropTarget(targetId, node) {\n    const handleDragEnter = e => this.handleDragEnter(e, targetId);\n\n    const handleDragOver = e => this.handleDragOver(e, targetId);\n\n    const handleDrop = e => this.handleDrop(e, targetId);\n\n    node.addEventListener('dragenter', handleDragEnter);\n    node.addEventListener('dragover', handleDragOver);\n    node.addEventListener('drop', handleDrop);\n    return () => {\n      node.removeEventListener('dragenter', handleDragEnter);\n      node.removeEventListener('dragover', handleDragOver);\n      node.removeEventListener('drop', handleDrop);\n    };\n  }\n\n  addEventListeners(target) {\n    // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n    if (!target.addEventListener) {\n      return;\n    }\n\n    target.addEventListener('dragstart', this.handleTopDragStart);\n    target.addEventListener('dragstart', this.handleTopDragStartCapture, true);\n    target.addEventListener('dragend', this.handleTopDragEndCapture, true);\n    target.addEventListener('dragenter', this.handleTopDragEnter);\n    target.addEventListener('dragenter', this.handleTopDragEnterCapture, true);\n    target.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n    target.addEventListener('dragover', this.handleTopDragOver);\n    target.addEventListener('dragover', this.handleTopDragOverCapture, true);\n    target.addEventListener('drop', this.handleTopDrop);\n    target.addEventListener('drop', this.handleTopDropCapture, true);\n  }\n\n  removeEventListeners(target) {\n    // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n    if (!target.removeEventListener) {\n      return;\n    }\n\n    target.removeEventListener('dragstart', this.handleTopDragStart);\n    target.removeEventListener('dragstart', this.handleTopDragStartCapture, true);\n    target.removeEventListener('dragend', this.handleTopDragEndCapture, true);\n    target.removeEventListener('dragenter', this.handleTopDragEnter);\n    target.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);\n    target.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);\n    target.removeEventListener('dragover', this.handleTopDragOver);\n    target.removeEventListener('dragover', this.handleTopDragOverCapture, true);\n    target.removeEventListener('drop', this.handleTopDrop);\n    target.removeEventListener('drop', this.handleTopDropCapture, true);\n  }\n\n  getCurrentSourceNodeOptions() {\n    const sourceId = this.monitor.getSourceId();\n    const sourceNodeOptions = this.sourceNodeOptions.get(sourceId);\n    return _objectSpread({\n      dropEffect: this.altKeyPressed ? 'copy' : 'move'\n    }, sourceNodeOptions || {});\n  }\n\n  getCurrentDropEffect() {\n    if (this.isDraggingNativeItem()) {\n      // It makes more sense to default to 'copy' for native resources\n      return 'copy';\n    }\n\n    return this.getCurrentSourceNodeOptions().dropEffect;\n  }\n\n  getCurrentSourcePreviewNodeOptions() {\n    const sourceId = this.monitor.getSourceId();\n    const sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);\n    return _objectSpread({\n      anchorX: 0.5,\n      anchorY: 0.5,\n      captureDraggingState: false\n    }, sourcePreviewNodeOptions || {});\n  }\n\n  isDraggingNativeItem() {\n    const itemType = this.monitor.getItemType();\n    return Object.keys(NativeTypes).some(key => NativeTypes[key] === itemType);\n  }\n\n  beginDragNativeItem(type, dataTransfer) {\n    this.clearCurrentDragSourceNode();\n    this.currentNativeSource = (0, _indexJs).createNativeDragSource(type, dataTransfer);\n    this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);\n    this.actions.beginDrag([this.currentNativeHandle]);\n  }\n\n  setCurrentDragSourceNode(node) {\n    this.clearCurrentDragSourceNode();\n    this.currentDragSourceNode = node; // A timeout of > 0 is necessary to resolve Firefox issue referenced\n    // See:\n    //   * https://github.com/react-dnd/react-dnd/pull/928\n    //   * https://github.com/react-dnd/react-dnd/issues/869\n\n    const MOUSE_MOVE_TIMEOUT = 1000; // Receiving a mouse event in the middle of a dragging operation\n    // means it has ended and the drag source node disappeared from DOM,\n    // so the browser didn't dispatch the dragend event.\n    //\n    // We need to wait before we start listening for mousemove events.\n    // This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event\n    // immediately in some browsers.\n    //\n    // See:\n    //   * https://github.com/react-dnd/react-dnd/pull/928\n    //   * https://github.com/react-dnd/react-dnd/issues/869\n    //\n\n    this.mouseMoveTimeoutTimer = setTimeout(() => {\n      var ref;\n      return (ref = this.rootElement) === null || ref === void 0 ? void 0 : ref.addEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n    }, MOUSE_MOVE_TIMEOUT);\n  }\n\n  clearCurrentDragSourceNode() {\n    if (this.currentDragSourceNode) {\n      this.currentDragSourceNode = null;\n\n      if (this.rootElement) {\n        var ref;\n        (ref = this.window) === null || ref === void 0 ? void 0 : ref.clearTimeout(this.mouseMoveTimeoutTimer || undefined);\n        this.rootElement.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);\n      }\n\n      this.mouseMoveTimeoutTimer = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  handleDragStart(e, sourceId) {\n    if (e.defaultPrevented) {\n      return;\n    }\n\n    if (!this.dragStartSourceIds) {\n      this.dragStartSourceIds = [];\n    }\n\n    this.dragStartSourceIds.unshift(sourceId);\n  }\n\n  handleDragEnter(_e, targetId) {\n    this.dragEnterTargetIds.unshift(targetId);\n  }\n\n  handleDragOver(_e, targetId) {\n    if (this.dragOverTargetIds === null) {\n      this.dragOverTargetIds = [];\n    }\n\n    this.dragOverTargetIds.unshift(targetId);\n  }\n\n  handleDrop(_e, targetId) {\n    this.dropTargetIds.unshift(targetId);\n  }\n\n  constructor(manager, globalContext, options) {\n    this.sourcePreviewNodes = new Map();\n    this.sourcePreviewNodeOptions = new Map();\n    this.sourceNodes = new Map();\n    this.sourceNodeOptions = new Map();\n    this.dragStartSourceIds = null;\n    this.dropTargetIds = [];\n    this.dragEnterTargetIds = [];\n    this.currentNativeSource = null;\n    this.currentNativeHandle = null;\n    this.currentDragSourceNode = null;\n    this.altKeyPressed = false;\n    this.mouseMoveTimeoutTimer = null;\n    this.asyncEndDragFrameId = null;\n    this.dragOverTargetIds = null;\n    this.lastClientOffset = null;\n    this.hoverRafId = null;\n\n    this.getSourceClientOffset = sourceId => {\n      const source = this.sourceNodes.get(sourceId);\n      return source && (0, _offsetUtilsJs).getNodeClientOffset(source) || null;\n    };\n\n    this.endDragNativeItem = () => {\n      if (!this.isDraggingNativeItem()) {\n        return;\n      }\n\n      this.actions.endDrag();\n\n      if (this.currentNativeHandle) {\n        this.registry.removeSource(this.currentNativeHandle);\n      }\n\n      this.currentNativeHandle = null;\n      this.currentNativeSource = null;\n    };\n\n    this.isNodeInDocument = node => {\n      // Check the node either in the main document or in the current context\n      return Boolean(node && this.document && this.document.body && this.document.body.contains(node));\n    };\n\n    this.endDragIfSourceWasRemovedFromDOM = () => {\n      const node = this.currentDragSourceNode;\n\n      if (node == null || this.isNodeInDocument(node)) {\n        return;\n      }\n\n      if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n        this.actions.endDrag();\n      }\n    };\n\n    this.handleTopDragStartCapture = () => {\n      this.clearCurrentDragSourceNode();\n      this.dragStartSourceIds = [];\n    };\n\n    this.handleTopDragStart = e => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      const {\n        dragStartSourceIds\n      } = this;\n      this.dragStartSourceIds = null;\n      const clientOffset = (0, _offsetUtilsJs).getEventClientOffset(e); // Avoid crashing if we missed a drop event or our previous drag died\n\n      if (this.monitor.isDragging()) {\n        this.actions.endDrag();\n      } // Don't publish the source just yet (see why below)\n\n\n      this.actions.beginDrag(dragStartSourceIds || [], {\n        publishSource: false,\n        getSourceClientOffset: this.getSourceClientOffset,\n        clientOffset\n      });\n      const {\n        dataTransfer\n      } = e;\n      const nativeType = (0, _indexJs).matchNativeItemType(dataTransfer);\n\n      if (this.monitor.isDragging()) {\n        if (dataTransfer && typeof dataTransfer.setDragImage === 'function') {\n          // Use custom drag image if user specifies it.\n          // If child drag source refuses drag but parent agrees,\n          // use parent's node as drag image. Neither works in IE though.\n          const sourceId = this.monitor.getSourceId();\n          const sourceNode = this.sourceNodes.get(sourceId);\n          const dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode;\n\n          if (dragPreview) {\n            const {\n              anchorX,\n              anchorY,\n              offsetX,\n              offsetY\n            } = this.getCurrentSourcePreviewNodeOptions();\n            const anchorPoint = {\n              anchorX,\n              anchorY\n            };\n            const offsetPoint = {\n              offsetX,\n              offsetY\n            };\n            const dragPreviewOffset = (0, _offsetUtilsJs).getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);\n            dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);\n          }\n        }\n\n        try {\n          // Firefox won't drag without setting data\n          dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.setData('application/json', {});\n        } catch (err) {// IE doesn't support MIME types in setData\n        } // Store drag source node so we can check whether\n        // it is removed from DOM and trigger endDrag manually.\n\n\n        this.setCurrentDragSourceNode(e.target); // Now we are ready to publish the drag source.. or are we not?\n\n        const {\n          captureDraggingState\n        } = this.getCurrentSourcePreviewNodeOptions();\n\n        if (!captureDraggingState) {\n          // Usually we want to publish it in the next tick so that browser\n          // is able to screenshot the current (not yet dragging) state.\n          //\n          // It also neatly avoids a situation where render() returns null\n          // in the same tick for the source element, and browser freaks out.\n          setTimeout(() => this.actions.publishDragSource(), 0);\n        } else {\n          // In some cases the user may want to override this behavior, e.g.\n          // to work around IE not supporting custom drag previews.\n          //\n          // When using a custom drag layer, the only way to prevent\n          // the default drag preview from drawing in IE is to screenshot\n          // the dragging state in which the node itself has zero opacity\n          // and height. In this case, though, returning null from render()\n          // will abruptly end the dragging, which is not obvious.\n          //\n          // This is the reason such behavior is strictly opt-in.\n          this.actions.publishDragSource();\n        }\n      } else if (nativeType) {\n        // A native item (such as URL) dragged from inside the document\n        this.beginDragNativeItem(nativeType);\n      } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {\n        // Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.\n        // Just let it drag. It's a native type (URL or text) and will be picked up in\n        // dragenter handler.\n        return;\n      } else {\n        // If by this time no drag source reacted, tell browser not to drag.\n        e.preventDefault();\n      }\n    };\n\n    this.handleTopDragEndCapture = () => {\n      if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n        // Firefox can dispatch this event in an infinite loop\n        // if dragend handler does something like showing an alert.\n        // Only proceed if we have not handled it already.\n        this.actions.endDrag();\n      }\n    };\n\n    this.handleTopDragEnterCapture = e => {\n      this.dragEnterTargetIds = [];\n\n      if (this.isDraggingNativeItem()) {\n        var ref;\n        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);\n      }\n\n      const isFirstEnter = this.enterLeaveCounter.enter(e.target);\n\n      if (!isFirstEnter || this.monitor.isDragging()) {\n        return;\n      }\n\n      const {\n        dataTransfer\n      } = e;\n      const nativeType = (0, _indexJs).matchNativeItemType(dataTransfer);\n\n      if (nativeType) {\n        // A native item (such as file or URL) dragged from outside the document\n        this.beginDragNativeItem(nativeType, dataTransfer);\n      }\n    };\n\n    this.handleTopDragEnter = e => {\n      const {\n        dragEnterTargetIds\n      } = this;\n      this.dragEnterTargetIds = [];\n\n      if (!this.monitor.isDragging()) {\n        // This is probably a native item type we don't understand.\n        return;\n      }\n\n      this.altKeyPressed = e.altKey; // If the target changes position as the result of `dragenter`, `dragover` might still\n      // get dispatched despite target being no longer there. The easy solution is to check\n      // whether there actually is a target before firing `hover`.\n\n      if (dragEnterTargetIds.length > 0) {\n        this.actions.hover(dragEnterTargetIds, {\n          clientOffset: (0, _offsetUtilsJs).getEventClientOffset(e)\n        });\n      }\n\n      const canDrop = dragEnterTargetIds.some(targetId => this.monitor.canDropOnTarget(targetId));\n\n      if (canDrop) {\n        // IE requires this to fire dragover events\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = this.getCurrentDropEffect();\n        }\n      }\n    };\n\n    this.handleTopDragOverCapture = e => {\n      this.dragOverTargetIds = [];\n\n      if (this.isDraggingNativeItem()) {\n        var ref;\n        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);\n      }\n    };\n\n    this.handleTopDragOver = e => {\n      const {\n        dragOverTargetIds\n      } = this;\n      this.dragOverTargetIds = [];\n\n      if (!this.monitor.isDragging()) {\n        // This is probably a native item type we don't understand.\n        // Prevent default \"drop and blow away the whole document\" action.\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n\n        return;\n      }\n\n      this.altKeyPressed = e.altKey;\n      this.lastClientOffset = (0, _offsetUtilsJs).getEventClientOffset(e);\n\n      if (this.hoverRafId === null && typeof requestAnimationFrame !== 'undefined') {\n        this.hoverRafId = requestAnimationFrame(() => {\n          if (this.monitor.isDragging()) {\n            this.actions.hover(dragOverTargetIds || [], {\n              clientOffset: this.lastClientOffset\n            });\n          }\n\n          this.hoverRafId = null;\n        });\n      }\n\n      const canDrop = (dragOverTargetIds || []).some(targetId => this.monitor.canDropOnTarget(targetId));\n\n      if (canDrop) {\n        // Show user-specified drop effect.\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = this.getCurrentDropEffect();\n        }\n      } else if (this.isDraggingNativeItem()) {\n        // Don't show a nice cursor but still prevent default\n        // \"drop and blow away the whole document\" action.\n        e.preventDefault();\n      } else {\n        e.preventDefault();\n\n        if (e.dataTransfer) {\n          e.dataTransfer.dropEffect = 'none';\n        }\n      }\n    };\n\n    this.handleTopDragLeaveCapture = e => {\n      if (this.isDraggingNativeItem()) {\n        e.preventDefault();\n      }\n\n      const isLastLeave = this.enterLeaveCounter.leave(e.target);\n\n      if (!isLastLeave) {\n        return;\n      }\n\n      if (this.isDraggingNativeItem()) {\n        setTimeout(() => this.endDragNativeItem(), 0);\n      }\n    };\n\n    this.handleTopDropCapture = e => {\n      this.dropTargetIds = [];\n\n      if (this.isDraggingNativeItem()) {\n        var ref;\n        e.preventDefault();\n        (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);\n      } else if ((0, _indexJs).matchNativeItemType(e.dataTransfer)) {\n        // Dragging some elements, like <a> and <img> may still behave like a native drag event,\n        // even if the current drag event matches a user-defined type.\n        // Stop the default behavior when we're not expecting a native item to be dropped.\n        e.preventDefault();\n      }\n\n      this.enterLeaveCounter.reset();\n    };\n\n    this.handleTopDrop = e => {\n      const {\n        dropTargetIds\n      } = this;\n      this.dropTargetIds = [];\n      this.actions.hover(dropTargetIds, {\n        clientOffset: (0, _offsetUtilsJs).getEventClientOffset(e)\n      });\n      this.actions.drop({\n        dropEffect: this.getCurrentDropEffect()\n      });\n\n      if (this.isDraggingNativeItem()) {\n        this.endDragNativeItem();\n      } else if (this.monitor.isDragging()) {\n        this.actions.endDrag();\n      }\n    };\n\n    this.handleSelectStart = e => {\n      const target = e.target; // Only IE requires us to explicitly say\n      // we want drag drop operation to start\n\n      if (typeof target.dragDrop !== 'function') {\n        return;\n      } // Inputs and textareas should be selectable\n\n\n      if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n        return;\n      } // For other targets, ask IE\n      // to enable drag and drop\n\n\n      e.preventDefault();\n      target.dragDrop();\n    };\n\n    this.options = new _optionsReaderJs.OptionsReader(globalContext, options);\n    this.actions = manager.getActions();\n    this.monitor = manager.getMonitor();\n    this.registry = manager.getRegistry();\n    this.enterLeaveCounter = new _enterLeaveCounterJs.EnterLeaveCounter(this.isNodeInDocument);\n  }\n\n}\n\nexports.HTML5BackendImpl = HTML5BackendImpl;","map":{"version":3,"mappings":"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","names":["NativeTypes","HTML5BackendImpl","profile","ref","ref1","sourcePreviewNodes","size","sourcePreviewNodeOptions","sourceNodeOptions","sourceNodes","dragStartSourceIds","length","dropTargetIds","dragEnterTargetIds","dragOverTargetIds","window","options","document","rootElement","setup","root","undefined","__isReactDndBackendSetUp","Error","addEventListeners","teardown","removeEventListeners","clearCurrentDragSourceNode","asyncEndDragFrameId","cancelAnimationFrame","connectDragPreview","sourceId","node","set","delete","connectDragSource","handleDragStart","e","handleSelectStart","setAttribute","addEventListener","removeEventListener","connectDropTarget","targetId","handleDragEnter","handleDragOver","handleDrop","target","handleTopDragStart","handleTopDragStartCapture","handleTopDragEndCapture","handleTopDragEnter","handleTopDragEnterCapture","handleTopDragLeaveCapture","handleTopDragOver","handleTopDragOverCapture","handleTopDrop","handleTopDropCapture","getCurrentSourceNodeOptions","monitor","getSourceId","get","_objectSpread","dropEffect","altKeyPressed","getCurrentDropEffect","isDraggingNativeItem","getCurrentSourcePreviewNodeOptions","anchorX","anchorY","captureDraggingState","itemType","getItemType","Object","keys","some","key","beginDragNativeItem","type","dataTransfer","currentNativeSource","createNativeDragSource","currentNativeHandle","registry","addSource","actions","beginDrag","setCurrentDragSourceNode","currentDragSourceNode","MOUSE_MOVE_TIMEOUT","mouseMoveTimeoutTimer","setTimeout","endDragIfSourceWasRemovedFromDOM","clearTimeout","defaultPrevented","unshift","_e","manager","globalContext","Map","lastClientOffset","hoverRafId","getSourceClientOffset","source","getNodeClientOffset","endDragNativeItem","endDrag","removeSource","isNodeInDocument","Boolean","body","contains","isDragging","clientOffset","getEventClientOffset","publishSource","nativeType","matchNativeItemType","setDragImage","sourceNode","dragPreview","offsetX","offsetY","anchorPoint","offsetPoint","dragPreviewOffset","getDragPreviewOffset","x","y","setData","err","publishDragSource","types","hasAttribute","preventDefault","loadDataTransfer","isFirstEnter","enterLeaveCounter","enter","altKey","hover","canDrop","canDropOnTarget","requestAnimationFrame","isLastLeave","leave","reset","drop","dragDrop","tagName","isContentEditable","OptionsReader","getActions","getMonitor","getRegistry","EnterLeaveCounter"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/react-dnd-html5-backend/src/HTML5BackendImpl.ts"],"sourcesContent":["import type {\n\tBackend,\n\tDragDropManager,\n\tDragDropActions,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n\tXYCoord,\n\tUnsubscribe,\n} from 'dnd-core'\nimport { EnterLeaveCounter } from './EnterLeaveCounter.js'\nimport {\n\tgetNodeClientOffset,\n\tgetEventClientOffset,\n\tgetDragPreviewOffset,\n} from './OffsetUtils.js'\nimport {\n\tcreateNativeDragSource,\n\tmatchNativeItemType,\n} from './NativeDragSources/index.js'\nimport * as NativeTypes from './NativeTypes.js'\nimport type { NativeDragSource } from './NativeDragSources/NativeDragSource.js'\nimport { OptionsReader } from './OptionsReader.js'\nimport type { HTML5BackendContext, HTML5BackendOptions } from './types.js'\n\ntype RootNode = Node & { __isReactDndBackendSetUp: boolean | undefined }\n\nexport class HTML5BackendImpl implements Backend {\n\tprivate options: OptionsReader\n\n\t// React-Dnd Components\n\tprivate actions: DragDropActions\n\tprivate monitor: DragDropMonitor\n\tprivate registry: HandlerRegistry\n\n\t// Internal State\n\tprivate enterLeaveCounter: EnterLeaveCounter\n\n\tprivate sourcePreviewNodes: Map<string, Element> = new Map()\n\tprivate sourcePreviewNodeOptions: Map<string, any> = new Map()\n\tprivate sourceNodes: Map<string, Element> = new Map()\n\tprivate sourceNodeOptions: Map<string, any> = new Map()\n\n\tprivate dragStartSourceIds: string[] | null = null\n\tprivate dropTargetIds: string[] = []\n\tprivate dragEnterTargetIds: string[] = []\n\tprivate currentNativeSource: NativeDragSource | null = null\n\tprivate currentNativeHandle: Identifier | null = null\n\tprivate currentDragSourceNode: Element | null = null\n\tprivate altKeyPressed = false\n\tprivate mouseMoveTimeoutTimer: number | null = null\n\tprivate asyncEndDragFrameId: number | null = null\n\tprivate dragOverTargetIds: string[] | null = null\n\n\tprivate lastClientOffset: XYCoord | null = null\n\tprivate hoverRafId: number | null = null\n\n\tpublic constructor(\n\t\tmanager: DragDropManager,\n\t\tglobalContext?: HTML5BackendContext,\n\t\toptions?: HTML5BackendOptions,\n\t) {\n\t\tthis.options = new OptionsReader(globalContext, options)\n\t\tthis.actions = manager.getActions()\n\t\tthis.monitor = manager.getMonitor()\n\t\tthis.registry = manager.getRegistry()\n\t\tthis.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument)\n\t}\n\n\t/**\n\t * Generate profiling statistics for the HTML5Backend.\n\t */\n\tpublic profile(): Record<string, number> {\n\t\treturn {\n\t\t\tsourcePreviewNodes: this.sourcePreviewNodes.size,\n\t\t\tsourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n\t\t\tsourceNodeOptions: this.sourceNodeOptions.size,\n\t\t\tsourceNodes: this.sourceNodes.size,\n\t\t\tdragStartSourceIds: this.dragStartSourceIds?.length || 0,\n\t\t\tdropTargetIds: this.dropTargetIds.length,\n\t\t\tdragEnterTargetIds: this.dragEnterTargetIds.length,\n\t\t\tdragOverTargetIds: this.dragOverTargetIds?.length || 0,\n\t\t}\n\t}\n\n\t// public for test\n\tpublic get window(): Window | undefined {\n\t\treturn this.options.window\n\t}\n\tpublic get document(): Document | undefined {\n\t\treturn this.options.document\n\t}\n\t/**\n\t * Get the root element to use for event subscriptions\n\t */\n\tprivate get rootElement(): Node | undefined {\n\t\treturn this.options.rootElement as Node\n\t}\n\n\tpublic setup(): void {\n\t\tconst root = this.rootElement as RootNode | undefined\n\t\tif (root === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\tif (root.__isReactDndBackendSetUp) {\n\t\t\tthrow new Error('Cannot have two HTML5 backends at the same time.')\n\t\t}\n\t\troot.__isReactDndBackendSetUp = true\n\t\tthis.addEventListeners(root)\n\t}\n\n\tpublic teardown(): void {\n\t\tconst root = this.rootElement as RootNode\n\t\tif (root === undefined) {\n\t\t\treturn\n\t\t}\n\n\t\troot.__isReactDndBackendSetUp = false\n\t\tthis.removeEventListeners(this.rootElement as Element)\n\t\tthis.clearCurrentDragSourceNode()\n\t\tif (this.asyncEndDragFrameId) {\n\t\t\tthis.window?.cancelAnimationFrame(this.asyncEndDragFrameId)\n\t\t}\n\t}\n\n\tpublic connectDragPreview(\n\t\tsourceId: string,\n\t\tnode: Element,\n\t\toptions: any,\n\t): Unsubscribe {\n\t\tthis.sourcePreviewNodeOptions.set(sourceId, options)\n\t\tthis.sourcePreviewNodes.set(sourceId, node)\n\n\t\treturn (): void => {\n\t\t\tthis.sourcePreviewNodes.delete(sourceId)\n\t\t\tthis.sourcePreviewNodeOptions.delete(sourceId)\n\t\t}\n\t}\n\n\tpublic connectDragSource(\n\t\tsourceId: string,\n\t\tnode: Element,\n\t\toptions: any,\n\t): Unsubscribe {\n\t\tthis.sourceNodes.set(sourceId, node)\n\t\tthis.sourceNodeOptions.set(sourceId, options)\n\n\t\tconst handleDragStart = (e: any) => this.handleDragStart(e, sourceId)\n\t\tconst handleSelectStart = (e: any) => this.handleSelectStart(e)\n\n\t\tnode.setAttribute('draggable', 'true')\n\t\tnode.addEventListener('dragstart', handleDragStart)\n\t\tnode.addEventListener('selectstart', handleSelectStart)\n\n\t\treturn (): void => {\n\t\t\tthis.sourceNodes.delete(sourceId)\n\t\t\tthis.sourceNodeOptions.delete(sourceId)\n\n\t\t\tnode.removeEventListener('dragstart', handleDragStart)\n\t\t\tnode.removeEventListener('selectstart', handleSelectStart)\n\t\t\tnode.setAttribute('draggable', 'false')\n\t\t}\n\t}\n\n\tpublic connectDropTarget(targetId: string, node: HTMLElement): Unsubscribe {\n\t\tconst handleDragEnter = (e: DragEvent) => this.handleDragEnter(e, targetId)\n\t\tconst handleDragOver = (e: DragEvent) => this.handleDragOver(e, targetId)\n\t\tconst handleDrop = (e: DragEvent) => this.handleDrop(e, targetId)\n\n\t\tnode.addEventListener('dragenter', handleDragEnter)\n\t\tnode.addEventListener('dragover', handleDragOver)\n\t\tnode.addEventListener('drop', handleDrop)\n\n\t\treturn (): void => {\n\t\t\tnode.removeEventListener('dragenter', handleDragEnter)\n\t\t\tnode.removeEventListener('dragover', handleDragOver)\n\t\t\tnode.removeEventListener('drop', handleDrop)\n\t\t}\n\t}\n\n\tprivate addEventListeners(target: Node) {\n\t\t// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n\t\tif (!target.addEventListener) {\n\t\t\treturn\n\t\t}\n\t\ttarget.addEventListener(\n\t\t\t'dragstart',\n\t\t\tthis.handleTopDragStart as EventListener,\n\t\t)\n\t\ttarget.addEventListener('dragstart', this.handleTopDragStartCapture, true)\n\t\ttarget.addEventListener('dragend', this.handleTopDragEndCapture, true)\n\t\ttarget.addEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnter as EventListener,\n\t\t)\n\t\ttarget.addEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnterCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.addEventListener(\n\t\t\t'dragleave',\n\t\t\tthis.handleTopDragLeaveCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.addEventListener('dragover', this.handleTopDragOver as EventListener)\n\t\ttarget.addEventListener(\n\t\t\t'dragover',\n\t\t\tthis.handleTopDragOverCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.addEventListener('drop', this.handleTopDrop as EventListener)\n\t\ttarget.addEventListener(\n\t\t\t'drop',\n\t\t\tthis.handleTopDropCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t}\n\n\tprivate removeEventListeners(target: Node) {\n\t\t// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813\n\t\tif (!target.removeEventListener) {\n\t\t\treturn\n\t\t}\n\t\ttarget.removeEventListener('dragstart', this.handleTopDragStart as any)\n\t\ttarget.removeEventListener(\n\t\t\t'dragstart',\n\t\t\tthis.handleTopDragStartCapture,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener('dragend', this.handleTopDragEndCapture, true)\n\t\ttarget.removeEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnter as EventListener,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragenter',\n\t\t\tthis.handleTopDragEnterCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragleave',\n\t\t\tthis.handleTopDragLeaveCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragover',\n\t\t\tthis.handleTopDragOver as EventListener,\n\t\t)\n\t\ttarget.removeEventListener(\n\t\t\t'dragover',\n\t\t\tthis.handleTopDragOverCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t\ttarget.removeEventListener('drop', this.handleTopDrop as EventListener)\n\t\ttarget.removeEventListener(\n\t\t\t'drop',\n\t\t\tthis.handleTopDropCapture as EventListener,\n\t\t\ttrue,\n\t\t)\n\t}\n\n\tprivate getCurrentSourceNodeOptions() {\n\t\tconst sourceId = this.monitor.getSourceId() as string\n\t\tconst sourceNodeOptions = this.sourceNodeOptions.get(sourceId)\n\n\t\treturn {\n\t\t\tdropEffect: this.altKeyPressed ? 'copy' : 'move',\n\t\t\t...(sourceNodeOptions || {}),\n\t\t}\n\t}\n\n\tprivate getCurrentDropEffect() {\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\t// It makes more sense to default to 'copy' for native resources\n\t\t\treturn 'copy'\n\t\t}\n\n\t\treturn this.getCurrentSourceNodeOptions().dropEffect\n\t}\n\n\tprivate getCurrentSourcePreviewNodeOptions() {\n\t\tconst sourceId = this.monitor.getSourceId() as string\n\t\tconst sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId)\n\n\t\treturn {\n\t\t\tanchorX: 0.5,\n\t\t\tanchorY: 0.5,\n\t\t\tcaptureDraggingState: false,\n\t\t\t...(sourcePreviewNodeOptions || {}),\n\t\t}\n\t}\n\n\tprivate getSourceClientOffset = (sourceId: string): XYCoord | null => {\n\t\tconst source = this.sourceNodes.get(sourceId)\n\t\treturn (source && getNodeClientOffset(source as HTMLElement)) || null\n\t}\n\n\tprivate isDraggingNativeItem() {\n\t\tconst itemType = this.monitor.getItemType()\n\t\treturn Object.keys(NativeTypes).some(\n\t\t\t(key: string) => (NativeTypes as any)[key] === itemType,\n\t\t)\n\t}\n\n\tprivate beginDragNativeItem(type: string, dataTransfer?: DataTransfer) {\n\t\tthis.clearCurrentDragSourceNode()\n\n\t\tthis.currentNativeSource = createNativeDragSource(type, dataTransfer)\n\t\tthis.currentNativeHandle = this.registry.addSource(\n\t\t\ttype,\n\t\t\tthis.currentNativeSource,\n\t\t)\n\t\tthis.actions.beginDrag([this.currentNativeHandle])\n\t}\n\n\tprivate endDragNativeItem = (): void => {\n\t\tif (!this.isDraggingNativeItem()) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.actions.endDrag()\n\t\tif (this.currentNativeHandle) {\n\t\t\tthis.registry.removeSource(this.currentNativeHandle)\n\t\t}\n\t\tthis.currentNativeHandle = null\n\t\tthis.currentNativeSource = null\n\t}\n\n\tprivate isNodeInDocument = (node: Node | null | undefined): boolean => {\n\t\t// Check the node either in the main document or in the current context\n\t\treturn Boolean(\n\t\t\tnode &&\n\t\t\t\tthis.document &&\n\t\t\t\tthis.document.body &&\n\t\t\t\tthis.document.body.contains(node),\n\t\t)\n\t}\n\n\tprivate endDragIfSourceWasRemovedFromDOM = (): void => {\n\t\tconst node = this.currentDragSourceNode\n\t\tif (node == null || this.isNodeInDocument(node)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t}\n\n\tprivate setCurrentDragSourceNode(node: Element | null) {\n\t\tthis.clearCurrentDragSourceNode()\n\t\tthis.currentDragSourceNode = node\n\n\t\t// A timeout of > 0 is necessary to resolve Firefox issue referenced\n\t\t// See:\n\t\t//   * https://github.com/react-dnd/react-dnd/pull/928\n\t\t//   * https://github.com/react-dnd/react-dnd/issues/869\n\t\tconst MOUSE_MOVE_TIMEOUT = 1000\n\n\t\t// Receiving a mouse event in the middle of a dragging operation\n\t\t// means it has ended and the drag source node disappeared from DOM,\n\t\t// so the browser didn't dispatch the dragend event.\n\t\t//\n\t\t// We need to wait before we start listening for mousemove events.\n\t\t// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event\n\t\t// immediately in some browsers.\n\t\t//\n\t\t// See:\n\t\t//   * https://github.com/react-dnd/react-dnd/pull/928\n\t\t//   * https://github.com/react-dnd/react-dnd/issues/869\n\t\t//\n\t\tthis.mouseMoveTimeoutTimer = setTimeout(() => {\n\t\t\treturn this.rootElement?.addEventListener(\n\t\t\t\t'mousemove',\n\t\t\t\tthis.endDragIfSourceWasRemovedFromDOM,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}, MOUSE_MOVE_TIMEOUT) as any as number\n\t}\n\n\tprivate clearCurrentDragSourceNode() {\n\t\tif (this.currentDragSourceNode) {\n\t\t\tthis.currentDragSourceNode = null\n\n\t\t\tif (this.rootElement) {\n\t\t\t\tthis.window?.clearTimeout(this.mouseMoveTimeoutTimer || undefined)\n\t\t\t\tthis.rootElement.removeEventListener(\n\t\t\t\t\t'mousemove',\n\t\t\t\t\tthis.endDragIfSourceWasRemovedFromDOM,\n\t\t\t\t\ttrue,\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tthis.mouseMoveTimeoutTimer = null\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\tpublic handleTopDragStartCapture = (): void => {\n\t\tthis.clearCurrentDragSourceNode()\n\t\tthis.dragStartSourceIds = []\n\t}\n\n\tpublic handleDragStart(e: DragEvent, sourceId: string): void {\n\t\tif (e.defaultPrevented) {\n\t\t\treturn\n\t\t}\n\n\t\tif (!this.dragStartSourceIds) {\n\t\t\tthis.dragStartSourceIds = []\n\t\t}\n\t\tthis.dragStartSourceIds.unshift(sourceId)\n\t}\n\n\tpublic handleTopDragStart = (e: DragEvent): void => {\n\t\tif (e.defaultPrevented) {\n\t\t\treturn\n\t\t}\n\n\t\tconst { dragStartSourceIds } = this\n\t\tthis.dragStartSourceIds = null\n\n\t\tconst clientOffset = getEventClientOffset(e)\n\n\t\t// Avoid crashing if we missed a drop event or our previous drag died\n\t\tif (this.monitor.isDragging()) {\n\t\t\tthis.actions.endDrag()\n\t\t}\n\n\t\t// Don't publish the source just yet (see why below)\n\t\tthis.actions.beginDrag(dragStartSourceIds || [], {\n\t\t\tpublishSource: false,\n\t\t\tgetSourceClientOffset: this.getSourceClientOffset,\n\t\t\tclientOffset,\n\t\t})\n\n\t\tconst { dataTransfer } = e\n\t\tconst nativeType = matchNativeItemType(dataTransfer)\n\n\t\tif (this.monitor.isDragging()) {\n\t\t\tif (dataTransfer && typeof dataTransfer.setDragImage === 'function') {\n\t\t\t\t// Use custom drag image if user specifies it.\n\t\t\t\t// If child drag source refuses drag but parent agrees,\n\t\t\t\t// use parent's node as drag image. Neither works in IE though.\n\t\t\t\tconst sourceId: string = this.monitor.getSourceId() as string\n\t\t\t\tconst sourceNode = this.sourceNodes.get(sourceId)\n\t\t\t\tconst dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode\n\n\t\t\t\tif (dragPreview) {\n\t\t\t\t\tconst { anchorX, anchorY, offsetX, offsetY } =\n\t\t\t\t\t\tthis.getCurrentSourcePreviewNodeOptions()\n\t\t\t\t\tconst anchorPoint = { anchorX, anchorY }\n\t\t\t\t\tconst offsetPoint = { offsetX, offsetY }\n\t\t\t\t\tconst dragPreviewOffset = getDragPreviewOffset(\n\t\t\t\t\t\tsourceNode as HTMLElement,\n\t\t\t\t\t\tdragPreview as HTMLElement,\n\t\t\t\t\t\tclientOffset,\n\t\t\t\t\t\tanchorPoint,\n\t\t\t\t\t\toffsetPoint,\n\t\t\t\t\t)\n\n\t\t\t\t\tdataTransfer.setDragImage(\n\t\t\t\t\t\tdragPreview,\n\t\t\t\t\t\tdragPreviewOffset.x,\n\t\t\t\t\t\tdragPreviewOffset.y,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// Firefox won't drag without setting data\n\t\t\t\tdataTransfer?.setData('application/json', {} as any)\n\t\t\t} catch (err) {\n\t\t\t\t// IE doesn't support MIME types in setData\n\t\t\t}\n\n\t\t\t// Store drag source node so we can check whether\n\t\t\t// it is removed from DOM and trigger endDrag manually.\n\t\t\tthis.setCurrentDragSourceNode(e.target as Element)\n\n\t\t\t// Now we are ready to publish the drag source.. or are we not?\n\t\t\tconst { captureDraggingState } = this.getCurrentSourcePreviewNodeOptions()\n\t\t\tif (!captureDraggingState) {\n\t\t\t\t// Usually we want to publish it in the next tick so that browser\n\t\t\t\t// is able to screenshot the current (not yet dragging) state.\n\t\t\t\t//\n\t\t\t\t// It also neatly avoids a situation where render() returns null\n\t\t\t\t// in the same tick for the source element, and browser freaks out.\n\t\t\t\tsetTimeout(() => this.actions.publishDragSource(), 0)\n\t\t\t} else {\n\t\t\t\t// In some cases the user may want to override this behavior, e.g.\n\t\t\t\t// to work around IE not supporting custom drag previews.\n\t\t\t\t//\n\t\t\t\t// When using a custom drag layer, the only way to prevent\n\t\t\t\t// the default drag preview from drawing in IE is to screenshot\n\t\t\t\t// the dragging state in which the node itself has zero opacity\n\t\t\t\t// and height. In this case, though, returning null from render()\n\t\t\t\t// will abruptly end the dragging, which is not obvious.\n\t\t\t\t//\n\t\t\t\t// This is the reason such behavior is strictly opt-in.\n\t\t\t\tthis.actions.publishDragSource()\n\t\t\t}\n\t\t} else if (nativeType) {\n\t\t\t// A native item (such as URL) dragged from inside the document\n\t\t\tthis.beginDragNativeItem(nativeType)\n\t\t} else if (\n\t\t\tdataTransfer &&\n\t\t\t!dataTransfer.types &&\n\t\t\t((e.target && !(e.target as Element).hasAttribute) ||\n\t\t\t\t!(e.target as Element).hasAttribute('draggable'))\n\t\t) {\n\t\t\t// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.\n\t\t\t// Just let it drag. It's a native type (URL or text) and will be picked up in\n\t\t\t// dragenter handler.\n\t\t\treturn\n\t\t} else {\n\t\t\t// If by this time no drag source reacted, tell browser not to drag.\n\t\t\te.preventDefault()\n\t\t}\n\t}\n\n\tpublic handleTopDragEndCapture = (): void => {\n\t\tif (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {\n\t\t\t// Firefox can dispatch this event in an infinite loop\n\t\t\t// if dragend handler does something like showing an alert.\n\t\t\t// Only proceed if we have not handled it already.\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t}\n\n\tpublic handleTopDragEnterCapture = (e: DragEvent): void => {\n\t\tthis.dragEnterTargetIds = []\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tthis.currentNativeSource?.loadDataTransfer(e.dataTransfer)\n\t\t}\n\n\t\tconst isFirstEnter = this.enterLeaveCounter.enter(e.target)\n\t\tif (!isFirstEnter || this.monitor.isDragging()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst { dataTransfer } = e\n\t\tconst nativeType = matchNativeItemType(dataTransfer)\n\n\t\tif (nativeType) {\n\t\t\t// A native item (such as file or URL) dragged from outside the document\n\t\t\tthis.beginDragNativeItem(nativeType, dataTransfer as DataTransfer)\n\t\t}\n\t}\n\n\tpublic handleDragEnter(_e: DragEvent, targetId: string): void {\n\t\tthis.dragEnterTargetIds.unshift(targetId)\n\t}\n\n\tpublic handleTopDragEnter = (e: DragEvent): void => {\n\t\tconst { dragEnterTargetIds } = this\n\t\tthis.dragEnterTargetIds = []\n\n\t\tif (!this.monitor.isDragging()) {\n\t\t\t// This is probably a native item type we don't understand.\n\t\t\treturn\n\t\t}\n\n\t\tthis.altKeyPressed = e.altKey\n\n\t\t// If the target changes position as the result of `dragenter`, `dragover` might still\n\t\t// get dispatched despite target being no longer there. The easy solution is to check\n\t\t// whether there actually is a target before firing `hover`.\n\t\tif (dragEnterTargetIds.length > 0) {\n\t\t\tthis.actions.hover(dragEnterTargetIds, {\n\t\t\t\tclientOffset: getEventClientOffset(e),\n\t\t\t})\n\t\t}\n\n\t\tconst canDrop = dragEnterTargetIds.some((targetId) =>\n\t\t\tthis.monitor.canDropOnTarget(targetId),\n\t\t)\n\n\t\tif (canDrop) {\n\t\t\t// IE requires this to fire dragover events\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = this.getCurrentDropEffect()\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleTopDragOverCapture = (e: DragEvent): void => {\n\t\tthis.dragOverTargetIds = []\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tthis.currentNativeSource?.loadDataTransfer(e.dataTransfer)\n\t\t}\n\t}\n\n\tpublic handleDragOver(_e: DragEvent, targetId: string): void {\n\t\tif (this.dragOverTargetIds === null) {\n\t\t\tthis.dragOverTargetIds = []\n\t\t}\n\t\tthis.dragOverTargetIds.unshift(targetId)\n\t}\n\n\tpublic handleTopDragOver = (e: DragEvent): void => {\n\t\tconst { dragOverTargetIds } = this\n\t\tthis.dragOverTargetIds = []\n\n\t\tif (!this.monitor.isDragging()) {\n\t\t\t// This is probably a native item type we don't understand.\n\t\t\t// Prevent default \"drop and blow away the whole document\" action.\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = 'none'\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\tthis.altKeyPressed = e.altKey\n\t\tthis.lastClientOffset = getEventClientOffset(e)\n\n\t\tif (\n\t\t\tthis.hoverRafId === null &&\n\t\t\ttypeof requestAnimationFrame !== 'undefined'\n\t\t) {\n\t\t\tthis.hoverRafId = requestAnimationFrame(() => {\n\t\t\t\tif (this.monitor.isDragging()) {\n\t\t\t\t\tthis.actions.hover(dragOverTargetIds || [], {\n\t\t\t\t\t\tclientOffset: this.lastClientOffset,\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tthis.hoverRafId = null\n\t\t\t})\n\t\t}\n\n\t\tconst canDrop = (dragOverTargetIds || []).some((targetId) =>\n\t\t\tthis.monitor.canDropOnTarget(targetId),\n\t\t)\n\n\t\tif (canDrop) {\n\t\t\t// Show user-specified drop effect.\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = this.getCurrentDropEffect()\n\t\t\t}\n\t\t} else if (this.isDraggingNativeItem()) {\n\t\t\t// Don't show a nice cursor but still prevent default\n\t\t\t// \"drop and blow away the whole document\" action.\n\t\t\te.preventDefault()\n\t\t} else {\n\t\t\te.preventDefault()\n\t\t\tif (e.dataTransfer) {\n\t\t\t\te.dataTransfer.dropEffect = 'none'\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleTopDragLeaveCapture = (e: DragEvent): void => {\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\te.preventDefault()\n\t\t}\n\n\t\tconst isLastLeave = this.enterLeaveCounter.leave(e.target)\n\t\tif (!isLastLeave) {\n\t\t\treturn\n\t\t}\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tsetTimeout(() => this.endDragNativeItem(), 0)\n\t\t}\n\t}\n\n\tpublic handleTopDropCapture = (e: DragEvent): void => {\n\t\tthis.dropTargetIds = []\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\te.preventDefault()\n\t\t\tthis.currentNativeSource?.loadDataTransfer(e.dataTransfer)\n\t\t} else if (matchNativeItemType(e.dataTransfer)) {\n\t\t\t// Dragging some elements, like <a> and <img> may still behave like a native drag event,\n\t\t\t// even if the current drag event matches a user-defined type.\n\t\t\t// Stop the default behavior when we're not expecting a native item to be dropped.\n\n\t\t\te.preventDefault()\n\t\t}\n\n\t\tthis.enterLeaveCounter.reset()\n\t}\n\n\tpublic handleDrop(_e: DragEvent, targetId: string): void {\n\t\tthis.dropTargetIds.unshift(targetId)\n\t}\n\n\tpublic handleTopDrop = (e: DragEvent): void => {\n\t\tconst { dropTargetIds } = this\n\t\tthis.dropTargetIds = []\n\n\t\tthis.actions.hover(dropTargetIds, {\n\t\t\tclientOffset: getEventClientOffset(e),\n\t\t})\n\t\tthis.actions.drop({ dropEffect: this.getCurrentDropEffect() })\n\n\t\tif (this.isDraggingNativeItem()) {\n\t\t\tthis.endDragNativeItem()\n\t\t} else if (this.monitor.isDragging()) {\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t}\n\n\tpublic handleSelectStart = (e: DragEvent): void => {\n\t\tconst target = e.target as HTMLElement & { dragDrop: () => void }\n\n\t\t// Only IE requires us to explicitly say\n\t\t// we want drag drop operation to start\n\t\tif (typeof target.dragDrop !== 'function') {\n\t\t\treturn\n\t\t}\n\n\t\t// Inputs and textareas should be selectable\n\t\tif (\n\t\t\ttarget.tagName === 'INPUT' ||\n\t\t\ttarget.tagName === 'SELECT' ||\n\t\t\ttarget.tagName === 'TEXTAREA' ||\n\t\t\ttarget.isContentEditable\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\t// For other targets, ask IE\n\t\t// to enable drag and drop\n\t\te.preventDefault()\n\t\ttarget.dragDrop()\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}