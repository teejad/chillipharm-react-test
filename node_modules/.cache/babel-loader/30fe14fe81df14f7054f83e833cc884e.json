{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require(\"@react-dnd/invariant\");\n\nvar _registryJs = require(\"../actions/registry.js\");\n\nvar _getNextUniqueIdJs = require(\"../utils/getNextUniqueId.js\");\n\nvar _interfacesJs = require(\"../interfaces.js\");\n\nvar _contractsJs = require(\"../contracts.js\");\n\nvar _asap = require(\"@react-dnd/asap\");\n\nfunction getNextHandlerId(role) {\n  const id = (0, _getNextUniqueIdJs).getNextUniqueId().toString();\n\n  switch (role) {\n    case _interfacesJs.HandlerRole.SOURCE:\n      return `S${id}`;\n\n    case _interfacesJs.HandlerRole.TARGET:\n      return `T${id}`;\n\n    default:\n      throw new Error(`Unknown Handler Role: ${role}`);\n  }\n}\n\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return _interfacesJs.HandlerRole.SOURCE;\n\n    case 'T':\n      return _interfacesJs.HandlerRole.TARGET;\n\n    default:\n      throw new Error(`Cannot parse handler ID: ${handlerId}`);\n  }\n}\n\nfunction mapContainsValue(map, searchValue) {\n  const entries = map.entries();\n  let isDone = false;\n\n  do {\n    const {\n      done,\n      value: [, value]\n    } = entries.next();\n\n    if (value === searchValue) {\n      return true;\n    }\n\n    isDone = !!done;\n  } while (!isDone);\n\n  return false;\n}\n\nclass HandlerRegistryImpl {\n  addSource(type, source) {\n    (0, _contractsJs).validateType(type);\n    (0, _contractsJs).validateSourceContract(source);\n    const sourceId = this.addHandler(_interfacesJs.HandlerRole.SOURCE, type, source);\n    this.store.dispatch((0, _registryJs).addSource(sourceId));\n    return sourceId;\n  }\n\n  addTarget(type, target) {\n    (0, _contractsJs).validateType(type, true);\n    (0, _contractsJs).validateTargetContract(target);\n    const targetId = this.addHandler(_interfacesJs.HandlerRole.TARGET, type, target);\n    this.store.dispatch((0, _registryJs).addTarget(targetId));\n    return targetId;\n  }\n\n  containsHandler(handler) {\n    return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n  }\n\n  getSource(sourceId) {\n    let includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    (0, _invariant).invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    const isPinned = includePinned && sourceId === this.pinnedSourceId;\n    const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n    return source;\n  }\n\n  getTarget(targetId) {\n    (0, _invariant).invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.dropTargets.get(targetId);\n  }\n\n  getSourceType(sourceId) {\n    (0, _invariant).invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    return this.types.get(sourceId);\n  }\n\n  getTargetType(targetId) {\n    (0, _invariant).invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.types.get(targetId);\n  }\n\n  isSourceId(handlerId) {\n    const role = parseRoleFromHandlerId(handlerId);\n    return role === _interfacesJs.HandlerRole.SOURCE;\n  }\n\n  isTargetId(handlerId) {\n    const role = parseRoleFromHandlerId(handlerId);\n    return role === _interfacesJs.HandlerRole.TARGET;\n  }\n\n  removeSource(sourceId) {\n    (0, _invariant).invariant(this.getSource(sourceId), 'Expected an existing source.');\n    this.store.dispatch((0, _registryJs).removeSource(sourceId));\n    (0, _asap).asap(() => {\n      this.dragSources.delete(sourceId);\n      this.types.delete(sourceId);\n    });\n  }\n\n  removeTarget(targetId) {\n    (0, _invariant).invariant(this.getTarget(targetId), 'Expected an existing target.');\n    this.store.dispatch((0, _registryJs).removeTarget(targetId));\n    this.dropTargets.delete(targetId);\n    this.types.delete(targetId);\n  }\n\n  pinSource(sourceId) {\n    const source = this.getSource(sourceId);\n    (0, _invariant).invariant(source, 'Expected an existing source.');\n    this.pinnedSourceId = sourceId;\n    this.pinnedSource = source;\n  }\n\n  unpinSource() {\n    (0, _invariant).invariant(this.pinnedSource, 'No source is pinned at the time.');\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n  }\n\n  addHandler(role, type, handler) {\n    const id = getNextHandlerId(role);\n    this.types.set(id, type);\n\n    if (role === _interfacesJs.HandlerRole.SOURCE) {\n      this.dragSources.set(id, handler);\n    } else if (role === _interfacesJs.HandlerRole.TARGET) {\n      this.dropTargets.set(id, handler);\n    }\n\n    return id;\n  }\n\n  constructor(store) {\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n\n}\n\nexports.HandlerRegistryImpl = HandlerRegistryImpl;","map":{"version":3,"mappings":"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","names":["getNextHandlerId","role","id","getNextUniqueId","toString","HandlerRole","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","done","value","next","HandlerRegistryImpl","addSource","type","source","validateType","validateSourceContract","sourceId","addHandler","store","dispatch","addTarget","target","validateTargetContract","targetId","containsHandler","handler","dragSources","dropTargets","getSource","includePinned","invariant","isSourceId","isPinned","pinnedSourceId","pinnedSource","get","getTarget","isTargetId","getSourceType","types","getTargetType","removeSource","asap","delete","removeTarget","pinSource","unpinSource","set","Map"],"sources":["/Users/davidandtiana/Downloads/chillibean-test/node_modules/dnd-core/src/classes/HandlerRegistryImpl.ts"],"sourcesContent":["import type { Store } from 'redux'\nimport { invariant } from '@react-dnd/invariant'\nimport {\n\taddSource,\n\taddTarget,\n\tremoveSource,\n\tremoveTarget,\n} from '../actions/registry.js'\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js'\nimport type { State } from '../reducers/index.js'\nimport {\n\tDragSource,\n\tDropTarget,\n\tSourceType,\n\tTargetType,\n\tIdentifier,\n\tHandlerRole,\n\tHandlerRegistry,\n} from '../interfaces.js'\nimport {\n\tvalidateSourceContract,\n\tvalidateTargetContract,\n\tvalidateType,\n} from '../contracts.js'\nimport { asap } from '@react-dnd/asap'\n\nfunction getNextHandlerId(role: HandlerRole): string {\n\tconst id = getNextUniqueId().toString()\n\tswitch (role) {\n\t\tcase HandlerRole.SOURCE:\n\t\t\treturn `S${id}`\n\t\tcase HandlerRole.TARGET:\n\t\t\treturn `T${id}`\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown Handler Role: ${role}`)\n\t}\n}\n\nfunction parseRoleFromHandlerId(handlerId: string) {\n\tswitch (handlerId[0]) {\n\t\tcase 'S':\n\t\t\treturn HandlerRole.SOURCE\n\t\tcase 'T':\n\t\t\treturn HandlerRole.TARGET\n\t\tdefault:\n\t\t\tthrow new Error(`Cannot parse handler ID: ${handlerId}`)\n\t}\n}\n\nfunction mapContainsValue<T>(map: Map<string, T>, searchValue: T) {\n\tconst entries = map.entries()\n\tlet isDone = false\n\tdo {\n\t\tconst {\n\t\t\tdone,\n\t\t\tvalue: [, value],\n\t\t} = entries.next()\n\t\tif (value === searchValue) {\n\t\t\treturn true\n\t\t}\n\t\tisDone = !!done\n\t} while (!isDone)\n\treturn false\n}\n\nexport class HandlerRegistryImpl implements HandlerRegistry {\n\tprivate types: Map<string, SourceType | TargetType> = new Map()\n\tprivate dragSources: Map<string, DragSource> = new Map()\n\tprivate dropTargets: Map<string, DropTarget> = new Map()\n\tprivate pinnedSourceId: string | null = null\n\tprivate pinnedSource: any = null\n\tprivate store: Store<State>\n\n\tpublic constructor(store: Store<State>) {\n\t\tthis.store = store\n\t}\n\n\tpublic addSource(type: SourceType, source: DragSource): string {\n\t\tvalidateType(type)\n\t\tvalidateSourceContract(source)\n\n\t\tconst sourceId = this.addHandler(HandlerRole.SOURCE, type, source)\n\t\tthis.store.dispatch(addSource(sourceId))\n\t\treturn sourceId\n\t}\n\n\tpublic addTarget(type: TargetType, target: DropTarget): string {\n\t\tvalidateType(type, true)\n\t\tvalidateTargetContract(target)\n\n\t\tconst targetId = this.addHandler(HandlerRole.TARGET, type, target)\n\t\tthis.store.dispatch(addTarget(targetId))\n\t\treturn targetId\n\t}\n\n\tpublic containsHandler(handler: DragSource | DropTarget): boolean {\n\t\treturn (\n\t\t\tmapContainsValue(this.dragSources, handler) ||\n\t\t\tmapContainsValue(this.dropTargets, handler)\n\t\t)\n\t}\n\n\tpublic getSource(sourceId: string, includePinned = false): DragSource {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\tconst isPinned = includePinned && sourceId === this.pinnedSourceId\n\t\tconst source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId)\n\t\treturn source\n\t}\n\n\tpublic getTarget(targetId: string): DropTarget {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.dropTargets.get(targetId) as DropTarget\n\t}\n\n\tpublic getSourceType(sourceId: string): Identifier {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\treturn this.types.get(sourceId) as Identifier\n\t}\n\n\tpublic getTargetType(targetId: string): Identifier | Identifier[] {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.types.get(targetId) as Identifier | Identifier[]\n\t}\n\n\tpublic isSourceId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.SOURCE\n\t}\n\n\tpublic isTargetId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.TARGET\n\t}\n\n\tpublic removeSource(sourceId: string): void {\n\t\tinvariant(this.getSource(sourceId), 'Expected an existing source.')\n\t\tthis.store.dispatch(removeSource(sourceId))\n\t\tasap(() => {\n\t\t\tthis.dragSources.delete(sourceId)\n\t\t\tthis.types.delete(sourceId)\n\t\t})\n\t}\n\n\tpublic removeTarget(targetId: string): void {\n\t\tinvariant(this.getTarget(targetId), 'Expected an existing target.')\n\t\tthis.store.dispatch(removeTarget(targetId))\n\t\tthis.dropTargets.delete(targetId)\n\t\tthis.types.delete(targetId)\n\t}\n\n\tpublic pinSource(sourceId: string): void {\n\t\tconst source = this.getSource(sourceId)\n\t\tinvariant(source, 'Expected an existing source.')\n\n\t\tthis.pinnedSourceId = sourceId\n\t\tthis.pinnedSource = source\n\t}\n\n\tpublic unpinSource(): void {\n\t\tinvariant(this.pinnedSource, 'No source is pinned at the time.')\n\n\t\tthis.pinnedSourceId = null\n\t\tthis.pinnedSource = null\n\t}\n\n\tprivate addHandler(\n\t\trole: HandlerRole,\n\t\ttype: SourceType | TargetType,\n\t\thandler: DragSource | DropTarget,\n\t): string {\n\t\tconst id = getNextHandlerId(role)\n\t\tthis.types.set(id, type)\n\t\tif (role === HandlerRole.SOURCE) {\n\t\t\tthis.dragSources.set(id, handler as DragSource)\n\t\t} else if (role === HandlerRole.TARGET) {\n\t\t\tthis.dropTargets.set(id, handler as DropTarget)\n\t\t}\n\t\treturn id\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}